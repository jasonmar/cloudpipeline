// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/instancemetric.proto

package com.google.cloud.example.protobuf;

/**
 * Protobuf type {@code google.protobuf.example.NetMetrics2}
 */
public  final class NetMetrics2 extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.protobuf.example.NetMetrics2)
    NetMetrics2OrBuilder {
private static final long serialVersionUID = 0L;
  // Use NetMetrics2.newBuilder() to construct.
  private NetMetrics2(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private NetMetrics2() {
    interface_ = "";
    udpRcvbuferrors_ = 0;
    ipIndiscards_ = 0;
    icmpOuttimestampreps_ = 0;
    icmpOutechos_ = 0;
    udpIgnoredmulti_ = 0L;
    udpliteOutdatagrams_ = 0;
    ipReasmtimeout_ = 0;
    ipFragoks_ = 0;
    icmpInmsgs_ = 0;
    udpIncsumerrors_ = 0;
    ipReasmreqds_ = 0;
    icmpOutaddrmasks_ = 0;
    tcpRtomax_ = 0L;
    udpliteRcvbuferrors_ = 0;
    ipReasmfails_ = 0;
    tcpMaxconn_ = 0;
    tcpRtomin_ = 0;
    tcpPassiveopens_ = 0L;
    ipFragcreates_ = 0;
    icmpIncsumerrors_ = 0;
    udpliteIndatagrams_ = 0;
    ipReasmoks_ = 0;
    icmpIntimeexcds_ = 0;
    icmpOuttimeexcds_ = 0;
    tcpInerrs_ = 0;
    icmpOutaddrmaskreps_ = 0;
    icmpmsgOuttype_ = 0;
    udpNoports_ = 0;
    icmpmsgIntype8_ = 0;
    tcpInsegs_ = 0L;
    udpliteNoports_ = 0;
    ipFragfails_ = 0;
    ipIndelivers_ = 0L;
    icmpOuttimestamps_ = 0;
    icmpOutechoreps_ = 0;
    tcpIncsumerrors_ = 0;
    tcpRtoalgorithm_ = 0;
    ipForwdatagrams_ = 0;
    icmpInsrcquenchs_ = 0;
    icmpOutdestunreachs_ = 0;
    icmpOutparmprobs_ = 0;
    ipOutnoroutes_ = 0;
    icmpInechoreps_ = 0;
    udpliteInerrors_ = 0;
    tcpCurrestab_ = 0;
    ipInunknownprotos_ = 0;
    icmpInechos_ = 0;
    icmpInparmprobs_ = 0;
    icmpInerrors_ = 0;
    tcpActiveopens_ = 0;
    tcpOutrsts_ = 0;
    udpliteIgnoredmulti_ = 0;
    ipForwarding_ = 0;
    ipInreceives_ = 0L;
    ipOutdiscards_ = 0;
    icmpInredirects_ = 0;
    icmpInaddrmaskreps_ = 0;
    icmpInaddrmasks_ = 0;
    icmpOuterrors_ = 0;
    tcpOutsegs_ = 0L;
    ipDefaultttl_ = 0;
    ipInaddrerrors_ = 0;
    icmpOutsrcquenchs_ = 0;
    icmpOutredirects_ = 0;
    tcpEstabresets_ = 0L;
    udpliteSndbuferrors_ = 0;
    ipOutrequests_ = 0L;
    icmpOutmsgs_ = 0;
    tcpRetranssegs_ = 0L;
    udpOutdatagrams_ = 0L;
    udpSndbuferrors_ = 0;
    icmpIntimestamps_ = 0;
    icmpIndestunreachs_ = 0;
    icmpmsgOuttype0_ = 0;
    udpIndatagrams_ = 0;
    udpInerrors_ = 0;
    udpliteIncsumerrors_ = 0;
    ipInhdrerrors_ = 0;
    icmpIntimestampreps_ = 0;
    icmpmsgIntype3_ = 0;
    tcpAttemptfails_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private NetMetrics2(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    int mutable_bitField1_ = 0;
    int mutable_bitField2_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            interface_ = s;
            break;
          }
          case 16: {

            udpRcvbuferrors_ = input.readInt32();
            break;
          }
          case 24: {

            ipIndiscards_ = input.readInt32();
            break;
          }
          case 32: {

            icmpOuttimestampreps_ = input.readInt32();
            break;
          }
          case 40: {

            icmpOutechos_ = input.readInt32();
            break;
          }
          case 48: {

            udpIgnoredmulti_ = input.readInt64();
            break;
          }
          case 56: {

            udpliteOutdatagrams_ = input.readInt32();
            break;
          }
          case 64: {

            ipReasmtimeout_ = input.readInt32();
            break;
          }
          case 72: {

            ipFragoks_ = input.readInt32();
            break;
          }
          case 80: {

            icmpInmsgs_ = input.readInt32();
            break;
          }
          case 88: {

            udpIncsumerrors_ = input.readInt32();
            break;
          }
          case 96: {

            ipReasmreqds_ = input.readInt32();
            break;
          }
          case 104: {

            icmpOutaddrmasks_ = input.readInt32();
            break;
          }
          case 112: {

            tcpRtomax_ = input.readInt64();
            break;
          }
          case 120: {

            udpliteRcvbuferrors_ = input.readInt32();
            break;
          }
          case 128: {

            ipReasmfails_ = input.readInt32();
            break;
          }
          case 136: {

            tcpMaxconn_ = input.readInt32();
            break;
          }
          case 144: {

            tcpRtomin_ = input.readInt32();
            break;
          }
          case 152: {

            tcpPassiveopens_ = input.readInt64();
            break;
          }
          case 160: {

            ipFragcreates_ = input.readInt32();
            break;
          }
          case 168: {

            icmpIncsumerrors_ = input.readInt32();
            break;
          }
          case 176: {

            udpliteIndatagrams_ = input.readInt32();
            break;
          }
          case 184: {

            ipReasmoks_ = input.readInt32();
            break;
          }
          case 192: {

            icmpIntimeexcds_ = input.readInt32();
            break;
          }
          case 200: {

            icmpOuttimeexcds_ = input.readInt32();
            break;
          }
          case 208: {

            tcpInerrs_ = input.readInt32();
            break;
          }
          case 216: {

            icmpOutaddrmaskreps_ = input.readInt32();
            break;
          }
          case 224: {

            icmpmsgOuttype_ = input.readInt32();
            break;
          }
          case 232: {

            udpNoports_ = input.readInt32();
            break;
          }
          case 240: {

            icmpmsgIntype8_ = input.readInt32();
            break;
          }
          case 248: {

            tcpInsegs_ = input.readInt64();
            break;
          }
          case 256: {

            udpliteNoports_ = input.readInt32();
            break;
          }
          case 264: {

            ipFragfails_ = input.readInt32();
            break;
          }
          case 272: {

            ipIndelivers_ = input.readInt64();
            break;
          }
          case 280: {

            icmpOuttimestamps_ = input.readInt32();
            break;
          }
          case 288: {

            icmpOutechoreps_ = input.readInt32();
            break;
          }
          case 296: {

            tcpIncsumerrors_ = input.readInt32();
            break;
          }
          case 304: {

            tcpRtoalgorithm_ = input.readInt32();
            break;
          }
          case 312: {

            ipForwdatagrams_ = input.readInt32();
            break;
          }
          case 320: {

            icmpInsrcquenchs_ = input.readInt32();
            break;
          }
          case 328: {

            icmpOutdestunreachs_ = input.readInt32();
            break;
          }
          case 336: {

            icmpOutparmprobs_ = input.readInt32();
            break;
          }
          case 344: {

            ipOutnoroutes_ = input.readInt32();
            break;
          }
          case 352: {

            icmpInechoreps_ = input.readInt32();
            break;
          }
          case 360: {

            udpliteInerrors_ = input.readInt32();
            break;
          }
          case 368: {

            tcpCurrestab_ = input.readInt32();
            break;
          }
          case 376: {

            ipInunknownprotos_ = input.readInt32();
            break;
          }
          case 384: {

            icmpInechos_ = input.readInt32();
            break;
          }
          case 392: {

            icmpInparmprobs_ = input.readInt32();
            break;
          }
          case 400: {

            icmpInerrors_ = input.readInt32();
            break;
          }
          case 408: {

            tcpActiveopens_ = input.readInt32();
            break;
          }
          case 416: {

            tcpOutrsts_ = input.readInt32();
            break;
          }
          case 424: {

            udpliteIgnoredmulti_ = input.readInt32();
            break;
          }
          case 432: {

            ipForwarding_ = input.readInt32();
            break;
          }
          case 440: {

            ipInreceives_ = input.readInt64();
            break;
          }
          case 448: {

            ipOutdiscards_ = input.readInt32();
            break;
          }
          case 456: {

            icmpInredirects_ = input.readInt32();
            break;
          }
          case 464: {

            icmpInaddrmaskreps_ = input.readInt32();
            break;
          }
          case 472: {

            icmpInaddrmasks_ = input.readInt32();
            break;
          }
          case 480: {

            icmpOuterrors_ = input.readInt32();
            break;
          }
          case 488: {

            tcpOutsegs_ = input.readInt64();
            break;
          }
          case 496: {

            ipDefaultttl_ = input.readInt32();
            break;
          }
          case 504: {

            ipInaddrerrors_ = input.readInt32();
            break;
          }
          case 512: {

            icmpOutsrcquenchs_ = input.readInt32();
            break;
          }
          case 520: {

            icmpOutredirects_ = input.readInt32();
            break;
          }
          case 528: {

            tcpEstabresets_ = input.readInt64();
            break;
          }
          case 536: {

            udpliteSndbuferrors_ = input.readInt32();
            break;
          }
          case 544: {

            ipOutrequests_ = input.readInt64();
            break;
          }
          case 552: {

            icmpOutmsgs_ = input.readInt32();
            break;
          }
          case 560: {

            tcpRetranssegs_ = input.readInt64();
            break;
          }
          case 568: {

            udpOutdatagrams_ = input.readInt64();
            break;
          }
          case 576: {

            udpSndbuferrors_ = input.readInt32();
            break;
          }
          case 584: {

            icmpIntimestamps_ = input.readInt32();
            break;
          }
          case 592: {

            icmpIndestunreachs_ = input.readInt32();
            break;
          }
          case 600: {

            icmpmsgOuttype0_ = input.readInt32();
            break;
          }
          case 608: {

            udpIndatagrams_ = input.readInt32();
            break;
          }
          case 616: {

            udpInerrors_ = input.readInt32();
            break;
          }
          case 624: {

            udpliteIncsumerrors_ = input.readInt32();
            break;
          }
          case 632: {

            ipInhdrerrors_ = input.readInt32();
            break;
          }
          case 640: {

            icmpIntimestampreps_ = input.readInt32();
            break;
          }
          case 648: {

            icmpmsgIntype3_ = input.readInt32();
            break;
          }
          case 656: {

            tcpAttemptfails_ = input.readInt32();
            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.cloud.example.protobuf.MetricsProto.internal_static_google_protobuf_example_NetMetrics2_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.example.protobuf.MetricsProto.internal_static_google_protobuf_example_NetMetrics2_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.example.protobuf.NetMetrics2.class, com.google.cloud.example.protobuf.NetMetrics2.Builder.class);
  }

  public static final int INTERFACE_FIELD_NUMBER = 1;
  private volatile java.lang.Object interface_;
  /**
   * <code>string interface = 1;</code>
   */
  public java.lang.String getInterface() {
    java.lang.Object ref = interface_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      interface_ = s;
      return s;
    }
  }
  /**
   * <code>string interface = 1;</code>
   */
  public com.google.protobuf.ByteString
      getInterfaceBytes() {
    java.lang.Object ref = interface_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      interface_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int UDP_RCVBUFERRORS_FIELD_NUMBER = 2;
  private int udpRcvbuferrors_;
  /**
   * <code>int32 udp_rcvbuferrors = 2;</code>
   */
  public int getUdpRcvbuferrors() {
    return udpRcvbuferrors_;
  }

  public static final int IP_INDISCARDS_FIELD_NUMBER = 3;
  private int ipIndiscards_;
  /**
   * <code>int32 ip_indiscards = 3;</code>
   */
  public int getIpIndiscards() {
    return ipIndiscards_;
  }

  public static final int ICMP_OUTTIMESTAMPREPS_FIELD_NUMBER = 4;
  private int icmpOuttimestampreps_;
  /**
   * <code>int32 icmp_outtimestampreps = 4;</code>
   */
  public int getIcmpOuttimestampreps() {
    return icmpOuttimestampreps_;
  }

  public static final int ICMP_OUTECHOS_FIELD_NUMBER = 5;
  private int icmpOutechos_;
  /**
   * <code>int32 icmp_outechos = 5;</code>
   */
  public int getIcmpOutechos() {
    return icmpOutechos_;
  }

  public static final int UDP_IGNOREDMULTI_FIELD_NUMBER = 6;
  private long udpIgnoredmulti_;
  /**
   * <code>int64 udp_ignoredmulti = 6;</code>
   */
  public long getUdpIgnoredmulti() {
    return udpIgnoredmulti_;
  }

  public static final int UDPLITE_OUTDATAGRAMS_FIELD_NUMBER = 7;
  private int udpliteOutdatagrams_;
  /**
   * <code>int32 udplite_outdatagrams = 7;</code>
   */
  public int getUdpliteOutdatagrams() {
    return udpliteOutdatagrams_;
  }

  public static final int IP_REASMTIMEOUT_FIELD_NUMBER = 8;
  private int ipReasmtimeout_;
  /**
   * <code>int32 ip_reasmtimeout = 8;</code>
   */
  public int getIpReasmtimeout() {
    return ipReasmtimeout_;
  }

  public static final int IP_FRAGOKS_FIELD_NUMBER = 9;
  private int ipFragoks_;
  /**
   * <code>int32 ip_fragoks = 9;</code>
   */
  public int getIpFragoks() {
    return ipFragoks_;
  }

  public static final int ICMP_INMSGS_FIELD_NUMBER = 10;
  private int icmpInmsgs_;
  /**
   * <code>int32 icmp_inmsgs = 10;</code>
   */
  public int getIcmpInmsgs() {
    return icmpInmsgs_;
  }

  public static final int UDP_INCSUMERRORS_FIELD_NUMBER = 11;
  private int udpIncsumerrors_;
  /**
   * <code>int32 udp_incsumerrors = 11;</code>
   */
  public int getUdpIncsumerrors() {
    return udpIncsumerrors_;
  }

  public static final int IP_REASMREQDS_FIELD_NUMBER = 12;
  private int ipReasmreqds_;
  /**
   * <code>int32 ip_reasmreqds = 12;</code>
   */
  public int getIpReasmreqds() {
    return ipReasmreqds_;
  }

  public static final int ICMP_OUTADDRMASKS_FIELD_NUMBER = 13;
  private int icmpOutaddrmasks_;
  /**
   * <code>int32 icmp_outaddrmasks = 13;</code>
   */
  public int getIcmpOutaddrmasks() {
    return icmpOutaddrmasks_;
  }

  public static final int TCP_RTOMAX_FIELD_NUMBER = 14;
  private long tcpRtomax_;
  /**
   * <code>int64 tcp_rtomax = 14;</code>
   */
  public long getTcpRtomax() {
    return tcpRtomax_;
  }

  public static final int UDPLITE_RCVBUFERRORS_FIELD_NUMBER = 15;
  private int udpliteRcvbuferrors_;
  /**
   * <code>int32 udplite_rcvbuferrors = 15;</code>
   */
  public int getUdpliteRcvbuferrors() {
    return udpliteRcvbuferrors_;
  }

  public static final int IP_REASMFAILS_FIELD_NUMBER = 16;
  private int ipReasmfails_;
  /**
   * <code>int32 ip_reasmfails = 16;</code>
   */
  public int getIpReasmfails() {
    return ipReasmfails_;
  }

  public static final int TCP_MAXCONN_FIELD_NUMBER = 17;
  private int tcpMaxconn_;
  /**
   * <code>int32 tcp_maxconn = 17;</code>
   */
  public int getTcpMaxconn() {
    return tcpMaxconn_;
  }

  public static final int TCP_RTOMIN_FIELD_NUMBER = 18;
  private int tcpRtomin_;
  /**
   * <code>int32 tcp_rtomin = 18;</code>
   */
  public int getTcpRtomin() {
    return tcpRtomin_;
  }

  public static final int TCP_PASSIVEOPENS_FIELD_NUMBER = 19;
  private long tcpPassiveopens_;
  /**
   * <code>int64 tcp_passiveopens = 19;</code>
   */
  public long getTcpPassiveopens() {
    return tcpPassiveopens_;
  }

  public static final int IP_FRAGCREATES_FIELD_NUMBER = 20;
  private int ipFragcreates_;
  /**
   * <code>int32 ip_fragcreates = 20;</code>
   */
  public int getIpFragcreates() {
    return ipFragcreates_;
  }

  public static final int ICMP_INCSUMERRORS_FIELD_NUMBER = 21;
  private int icmpIncsumerrors_;
  /**
   * <code>int32 icmp_incsumerrors = 21;</code>
   */
  public int getIcmpIncsumerrors() {
    return icmpIncsumerrors_;
  }

  public static final int UDPLITE_INDATAGRAMS_FIELD_NUMBER = 22;
  private int udpliteIndatagrams_;
  /**
   * <code>int32 udplite_indatagrams = 22;</code>
   */
  public int getUdpliteIndatagrams() {
    return udpliteIndatagrams_;
  }

  public static final int IP_REASMOKS_FIELD_NUMBER = 23;
  private int ipReasmoks_;
  /**
   * <code>int32 ip_reasmoks = 23;</code>
   */
  public int getIpReasmoks() {
    return ipReasmoks_;
  }

  public static final int ICMP_INTIMEEXCDS_FIELD_NUMBER = 24;
  private int icmpIntimeexcds_;
  /**
   * <code>int32 icmp_intimeexcds = 24;</code>
   */
  public int getIcmpIntimeexcds() {
    return icmpIntimeexcds_;
  }

  public static final int ICMP_OUTTIMEEXCDS_FIELD_NUMBER = 25;
  private int icmpOuttimeexcds_;
  /**
   * <code>int32 icmp_outtimeexcds = 25;</code>
   */
  public int getIcmpOuttimeexcds() {
    return icmpOuttimeexcds_;
  }

  public static final int TCP_INERRS_FIELD_NUMBER = 26;
  private int tcpInerrs_;
  /**
   * <code>int32 tcp_inerrs = 26;</code>
   */
  public int getTcpInerrs() {
    return tcpInerrs_;
  }

  public static final int ICMP_OUTADDRMASKREPS_FIELD_NUMBER = 27;
  private int icmpOutaddrmaskreps_;
  /**
   * <code>int32 icmp_outaddrmaskreps = 27;</code>
   */
  public int getIcmpOutaddrmaskreps() {
    return icmpOutaddrmaskreps_;
  }

  public static final int ICMPMSG_OUTTYPE_FIELD_NUMBER = 28;
  private int icmpmsgOuttype_;
  /**
   * <code>int32 icmpmsg_outtype = 28;</code>
   */
  public int getIcmpmsgOuttype() {
    return icmpmsgOuttype_;
  }

  public static final int UDP_NOPORTS_FIELD_NUMBER = 29;
  private int udpNoports_;
  /**
   * <code>int32 udp_noports = 29;</code>
   */
  public int getUdpNoports() {
    return udpNoports_;
  }

  public static final int ICMPMSG_INTYPE8_FIELD_NUMBER = 30;
  private int icmpmsgIntype8_;
  /**
   * <code>int32 icmpmsg_intype8 = 30;</code>
   */
  public int getIcmpmsgIntype8() {
    return icmpmsgIntype8_;
  }

  public static final int TCP_INSEGS_FIELD_NUMBER = 31;
  private long tcpInsegs_;
  /**
   * <code>int64 tcp_insegs = 31;</code>
   */
  public long getTcpInsegs() {
    return tcpInsegs_;
  }

  public static final int UDPLITE_NOPORTS_FIELD_NUMBER = 32;
  private int udpliteNoports_;
  /**
   * <code>int32 udplite_noports = 32;</code>
   */
  public int getUdpliteNoports() {
    return udpliteNoports_;
  }

  public static final int IP_FRAGFAILS_FIELD_NUMBER = 33;
  private int ipFragfails_;
  /**
   * <code>int32 ip_fragfails = 33;</code>
   */
  public int getIpFragfails() {
    return ipFragfails_;
  }

  public static final int IP_INDELIVERS_FIELD_NUMBER = 34;
  private long ipIndelivers_;
  /**
   * <code>int64 ip_indelivers = 34;</code>
   */
  public long getIpIndelivers() {
    return ipIndelivers_;
  }

  public static final int ICMP_OUTTIMESTAMPS_FIELD_NUMBER = 35;
  private int icmpOuttimestamps_;
  /**
   * <code>int32 icmp_outtimestamps = 35;</code>
   */
  public int getIcmpOuttimestamps() {
    return icmpOuttimestamps_;
  }

  public static final int ICMP_OUTECHOREPS_FIELD_NUMBER = 36;
  private int icmpOutechoreps_;
  /**
   * <code>int32 icmp_outechoreps = 36;</code>
   */
  public int getIcmpOutechoreps() {
    return icmpOutechoreps_;
  }

  public static final int TCP_INCSUMERRORS_FIELD_NUMBER = 37;
  private int tcpIncsumerrors_;
  /**
   * <code>int32 tcp_incsumerrors = 37;</code>
   */
  public int getTcpIncsumerrors() {
    return tcpIncsumerrors_;
  }

  public static final int TCP_RTOALGORITHM_FIELD_NUMBER = 38;
  private int tcpRtoalgorithm_;
  /**
   * <code>int32 tcp_rtoalgorithm = 38;</code>
   */
  public int getTcpRtoalgorithm() {
    return tcpRtoalgorithm_;
  }

  public static final int IP_FORWDATAGRAMS_FIELD_NUMBER = 39;
  private int ipForwdatagrams_;
  /**
   * <code>int32 ip_forwdatagrams = 39;</code>
   */
  public int getIpForwdatagrams() {
    return ipForwdatagrams_;
  }

  public static final int ICMP_INSRCQUENCHS_FIELD_NUMBER = 40;
  private int icmpInsrcquenchs_;
  /**
   * <code>int32 icmp_insrcquenchs = 40;</code>
   */
  public int getIcmpInsrcquenchs() {
    return icmpInsrcquenchs_;
  }

  public static final int ICMP_OUTDESTUNREACHS_FIELD_NUMBER = 41;
  private int icmpOutdestunreachs_;
  /**
   * <code>int32 icmp_outdestunreachs = 41;</code>
   */
  public int getIcmpOutdestunreachs() {
    return icmpOutdestunreachs_;
  }

  public static final int ICMP_OUTPARMPROBS_FIELD_NUMBER = 42;
  private int icmpOutparmprobs_;
  /**
   * <code>int32 icmp_outparmprobs = 42;</code>
   */
  public int getIcmpOutparmprobs() {
    return icmpOutparmprobs_;
  }

  public static final int IP_OUTNOROUTES_FIELD_NUMBER = 43;
  private int ipOutnoroutes_;
  /**
   * <code>int32 ip_outnoroutes = 43;</code>
   */
  public int getIpOutnoroutes() {
    return ipOutnoroutes_;
  }

  public static final int ICMP_INECHOREPS_FIELD_NUMBER = 44;
  private int icmpInechoreps_;
  /**
   * <code>int32 icmp_inechoreps = 44;</code>
   */
  public int getIcmpInechoreps() {
    return icmpInechoreps_;
  }

  public static final int UDPLITE_INERRORS_FIELD_NUMBER = 45;
  private int udpliteInerrors_;
  /**
   * <code>int32 udplite_inerrors = 45;</code>
   */
  public int getUdpliteInerrors() {
    return udpliteInerrors_;
  }

  public static final int TCP_CURRESTAB_FIELD_NUMBER = 46;
  private int tcpCurrestab_;
  /**
   * <code>int32 tcp_currestab = 46;</code>
   */
  public int getTcpCurrestab() {
    return tcpCurrestab_;
  }

  public static final int IP_INUNKNOWNPROTOS_FIELD_NUMBER = 47;
  private int ipInunknownprotos_;
  /**
   * <code>int32 ip_inunknownprotos = 47;</code>
   */
  public int getIpInunknownprotos() {
    return ipInunknownprotos_;
  }

  public static final int ICMP_INECHOS_FIELD_NUMBER = 48;
  private int icmpInechos_;
  /**
   * <code>int32 icmp_inechos = 48;</code>
   */
  public int getIcmpInechos() {
    return icmpInechos_;
  }

  public static final int ICMP_INPARMPROBS_FIELD_NUMBER = 49;
  private int icmpInparmprobs_;
  /**
   * <code>int32 icmp_inparmprobs = 49;</code>
   */
  public int getIcmpInparmprobs() {
    return icmpInparmprobs_;
  }

  public static final int ICMP_INERRORS_FIELD_NUMBER = 50;
  private int icmpInerrors_;
  /**
   * <code>int32 icmp_inerrors = 50;</code>
   */
  public int getIcmpInerrors() {
    return icmpInerrors_;
  }

  public static final int TCP_ACTIVEOPENS_FIELD_NUMBER = 51;
  private int tcpActiveopens_;
  /**
   * <code>int32 tcp_activeopens = 51;</code>
   */
  public int getTcpActiveopens() {
    return tcpActiveopens_;
  }

  public static final int TCP_OUTRSTS_FIELD_NUMBER = 52;
  private int tcpOutrsts_;
  /**
   * <code>int32 tcp_outrsts = 52;</code>
   */
  public int getTcpOutrsts() {
    return tcpOutrsts_;
  }

  public static final int UDPLITE_IGNOREDMULTI_FIELD_NUMBER = 53;
  private int udpliteIgnoredmulti_;
  /**
   * <code>int32 udplite_ignoredmulti = 53;</code>
   */
  public int getUdpliteIgnoredmulti() {
    return udpliteIgnoredmulti_;
  }

  public static final int IP_FORWARDING_FIELD_NUMBER = 54;
  private int ipForwarding_;
  /**
   * <code>int32 ip_forwarding = 54;</code>
   */
  public int getIpForwarding() {
    return ipForwarding_;
  }

  public static final int IP_INRECEIVES_FIELD_NUMBER = 55;
  private long ipInreceives_;
  /**
   * <code>int64 ip_inreceives = 55;</code>
   */
  public long getIpInreceives() {
    return ipInreceives_;
  }

  public static final int IP_OUTDISCARDS_FIELD_NUMBER = 56;
  private int ipOutdiscards_;
  /**
   * <code>int32 ip_outdiscards = 56;</code>
   */
  public int getIpOutdiscards() {
    return ipOutdiscards_;
  }

  public static final int ICMP_INREDIRECTS_FIELD_NUMBER = 57;
  private int icmpInredirects_;
  /**
   * <code>int32 icmp_inredirects = 57;</code>
   */
  public int getIcmpInredirects() {
    return icmpInredirects_;
  }

  public static final int ICMP_INADDRMASKREPS_FIELD_NUMBER = 58;
  private int icmpInaddrmaskreps_;
  /**
   * <code>int32 icmp_inaddrmaskreps = 58;</code>
   */
  public int getIcmpInaddrmaskreps() {
    return icmpInaddrmaskreps_;
  }

  public static final int ICMP_INADDRMASKS_FIELD_NUMBER = 59;
  private int icmpInaddrmasks_;
  /**
   * <code>int32 icmp_inaddrmasks = 59;</code>
   */
  public int getIcmpInaddrmasks() {
    return icmpInaddrmasks_;
  }

  public static final int ICMP_OUTERRORS_FIELD_NUMBER = 60;
  private int icmpOuterrors_;
  /**
   * <code>int32 icmp_outerrors = 60;</code>
   */
  public int getIcmpOuterrors() {
    return icmpOuterrors_;
  }

  public static final int TCP_OUTSEGS_FIELD_NUMBER = 61;
  private long tcpOutsegs_;
  /**
   * <code>int64 tcp_outsegs = 61;</code>
   */
  public long getTcpOutsegs() {
    return tcpOutsegs_;
  }

  public static final int IP_DEFAULTTTL_FIELD_NUMBER = 62;
  private int ipDefaultttl_;
  /**
   * <code>int32 ip_defaultttl = 62;</code>
   */
  public int getIpDefaultttl() {
    return ipDefaultttl_;
  }

  public static final int IP_INADDRERRORS_FIELD_NUMBER = 63;
  private int ipInaddrerrors_;
  /**
   * <code>int32 ip_inaddrerrors = 63;</code>
   */
  public int getIpInaddrerrors() {
    return ipInaddrerrors_;
  }

  public static final int ICMP_OUTSRCQUENCHS_FIELD_NUMBER = 64;
  private int icmpOutsrcquenchs_;
  /**
   * <code>int32 icmp_outsrcquenchs = 64;</code>
   */
  public int getIcmpOutsrcquenchs() {
    return icmpOutsrcquenchs_;
  }

  public static final int ICMP_OUTREDIRECTS_FIELD_NUMBER = 65;
  private int icmpOutredirects_;
  /**
   * <code>int32 icmp_outredirects = 65;</code>
   */
  public int getIcmpOutredirects() {
    return icmpOutredirects_;
  }

  public static final int TCP_ESTABRESETS_FIELD_NUMBER = 66;
  private long tcpEstabresets_;
  /**
   * <code>int64 tcp_estabresets = 66;</code>
   */
  public long getTcpEstabresets() {
    return tcpEstabresets_;
  }

  public static final int UDPLITE_SNDBUFERRORS_FIELD_NUMBER = 67;
  private int udpliteSndbuferrors_;
  /**
   * <code>int32 udplite_sndbuferrors = 67;</code>
   */
  public int getUdpliteSndbuferrors() {
    return udpliteSndbuferrors_;
  }

  public static final int IP_OUTREQUESTS_FIELD_NUMBER = 68;
  private long ipOutrequests_;
  /**
   * <code>int64 ip_outrequests = 68;</code>
   */
  public long getIpOutrequests() {
    return ipOutrequests_;
  }

  public static final int ICMP_OUTMSGS_FIELD_NUMBER = 69;
  private int icmpOutmsgs_;
  /**
   * <code>int32 icmp_outmsgs = 69;</code>
   */
  public int getIcmpOutmsgs() {
    return icmpOutmsgs_;
  }

  public static final int TCP_RETRANSSEGS_FIELD_NUMBER = 70;
  private long tcpRetranssegs_;
  /**
   * <code>int64 tcp_retranssegs = 70;</code>
   */
  public long getTcpRetranssegs() {
    return tcpRetranssegs_;
  }

  public static final int UDP_OUTDATAGRAMS_FIELD_NUMBER = 71;
  private long udpOutdatagrams_;
  /**
   * <code>int64 udp_outdatagrams = 71;</code>
   */
  public long getUdpOutdatagrams() {
    return udpOutdatagrams_;
  }

  public static final int UDP_SNDBUFERRORS_FIELD_NUMBER = 72;
  private int udpSndbuferrors_;
  /**
   * <code>int32 udp_sndbuferrors = 72;</code>
   */
  public int getUdpSndbuferrors() {
    return udpSndbuferrors_;
  }

  public static final int ICMP_INTIMESTAMPS_FIELD_NUMBER = 73;
  private int icmpIntimestamps_;
  /**
   * <code>int32 icmp_intimestamps = 73;</code>
   */
  public int getIcmpIntimestamps() {
    return icmpIntimestamps_;
  }

  public static final int ICMP_INDESTUNREACHS_FIELD_NUMBER = 74;
  private int icmpIndestunreachs_;
  /**
   * <code>int32 icmp_indestunreachs = 74;</code>
   */
  public int getIcmpIndestunreachs() {
    return icmpIndestunreachs_;
  }

  public static final int ICMPMSG_OUTTYPE0_FIELD_NUMBER = 75;
  private int icmpmsgOuttype0_;
  /**
   * <code>int32 icmpmsg_outtype0 = 75;</code>
   */
  public int getIcmpmsgOuttype0() {
    return icmpmsgOuttype0_;
  }

  public static final int UDP_INDATAGRAMS_FIELD_NUMBER = 76;
  private int udpIndatagrams_;
  /**
   * <code>int32 udp_indatagrams = 76;</code>
   */
  public int getUdpIndatagrams() {
    return udpIndatagrams_;
  }

  public static final int UDP_INERRORS_FIELD_NUMBER = 77;
  private int udpInerrors_;
  /**
   * <code>int32 udp_inerrors = 77;</code>
   */
  public int getUdpInerrors() {
    return udpInerrors_;
  }

  public static final int UDPLITE_INCSUMERRORS_FIELD_NUMBER = 78;
  private int udpliteIncsumerrors_;
  /**
   * <code>int32 udplite_incsumerrors = 78;</code>
   */
  public int getUdpliteIncsumerrors() {
    return udpliteIncsumerrors_;
  }

  public static final int IP_INHDRERRORS_FIELD_NUMBER = 79;
  private int ipInhdrerrors_;
  /**
   * <code>int32 ip_inhdrerrors = 79;</code>
   */
  public int getIpInhdrerrors() {
    return ipInhdrerrors_;
  }

  public static final int ICMP_INTIMESTAMPREPS_FIELD_NUMBER = 80;
  private int icmpIntimestampreps_;
  /**
   * <code>int32 icmp_intimestampreps = 80;</code>
   */
  public int getIcmpIntimestampreps() {
    return icmpIntimestampreps_;
  }

  public static final int ICMPMSG_INTYPE3_FIELD_NUMBER = 81;
  private int icmpmsgIntype3_;
  /**
   * <code>int32 icmpmsg_intype3 = 81;</code>
   */
  public int getIcmpmsgIntype3() {
    return icmpmsgIntype3_;
  }

  public static final int TCP_ATTEMPTFAILS_FIELD_NUMBER = 82;
  private int tcpAttemptfails_;
  /**
   * <code>int32 tcp_attemptfails = 82;</code>
   */
  public int getTcpAttemptfails() {
    return tcpAttemptfails_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getInterfaceBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, interface_);
    }
    if (udpRcvbuferrors_ != 0) {
      output.writeInt32(2, udpRcvbuferrors_);
    }
    if (ipIndiscards_ != 0) {
      output.writeInt32(3, ipIndiscards_);
    }
    if (icmpOuttimestampreps_ != 0) {
      output.writeInt32(4, icmpOuttimestampreps_);
    }
    if (icmpOutechos_ != 0) {
      output.writeInt32(5, icmpOutechos_);
    }
    if (udpIgnoredmulti_ != 0L) {
      output.writeInt64(6, udpIgnoredmulti_);
    }
    if (udpliteOutdatagrams_ != 0) {
      output.writeInt32(7, udpliteOutdatagrams_);
    }
    if (ipReasmtimeout_ != 0) {
      output.writeInt32(8, ipReasmtimeout_);
    }
    if (ipFragoks_ != 0) {
      output.writeInt32(9, ipFragoks_);
    }
    if (icmpInmsgs_ != 0) {
      output.writeInt32(10, icmpInmsgs_);
    }
    if (udpIncsumerrors_ != 0) {
      output.writeInt32(11, udpIncsumerrors_);
    }
    if (ipReasmreqds_ != 0) {
      output.writeInt32(12, ipReasmreqds_);
    }
    if (icmpOutaddrmasks_ != 0) {
      output.writeInt32(13, icmpOutaddrmasks_);
    }
    if (tcpRtomax_ != 0L) {
      output.writeInt64(14, tcpRtomax_);
    }
    if (udpliteRcvbuferrors_ != 0) {
      output.writeInt32(15, udpliteRcvbuferrors_);
    }
    if (ipReasmfails_ != 0) {
      output.writeInt32(16, ipReasmfails_);
    }
    if (tcpMaxconn_ != 0) {
      output.writeInt32(17, tcpMaxconn_);
    }
    if (tcpRtomin_ != 0) {
      output.writeInt32(18, tcpRtomin_);
    }
    if (tcpPassiveopens_ != 0L) {
      output.writeInt64(19, tcpPassiveopens_);
    }
    if (ipFragcreates_ != 0) {
      output.writeInt32(20, ipFragcreates_);
    }
    if (icmpIncsumerrors_ != 0) {
      output.writeInt32(21, icmpIncsumerrors_);
    }
    if (udpliteIndatagrams_ != 0) {
      output.writeInt32(22, udpliteIndatagrams_);
    }
    if (ipReasmoks_ != 0) {
      output.writeInt32(23, ipReasmoks_);
    }
    if (icmpIntimeexcds_ != 0) {
      output.writeInt32(24, icmpIntimeexcds_);
    }
    if (icmpOuttimeexcds_ != 0) {
      output.writeInt32(25, icmpOuttimeexcds_);
    }
    if (tcpInerrs_ != 0) {
      output.writeInt32(26, tcpInerrs_);
    }
    if (icmpOutaddrmaskreps_ != 0) {
      output.writeInt32(27, icmpOutaddrmaskreps_);
    }
    if (icmpmsgOuttype_ != 0) {
      output.writeInt32(28, icmpmsgOuttype_);
    }
    if (udpNoports_ != 0) {
      output.writeInt32(29, udpNoports_);
    }
    if (icmpmsgIntype8_ != 0) {
      output.writeInt32(30, icmpmsgIntype8_);
    }
    if (tcpInsegs_ != 0L) {
      output.writeInt64(31, tcpInsegs_);
    }
    if (udpliteNoports_ != 0) {
      output.writeInt32(32, udpliteNoports_);
    }
    if (ipFragfails_ != 0) {
      output.writeInt32(33, ipFragfails_);
    }
    if (ipIndelivers_ != 0L) {
      output.writeInt64(34, ipIndelivers_);
    }
    if (icmpOuttimestamps_ != 0) {
      output.writeInt32(35, icmpOuttimestamps_);
    }
    if (icmpOutechoreps_ != 0) {
      output.writeInt32(36, icmpOutechoreps_);
    }
    if (tcpIncsumerrors_ != 0) {
      output.writeInt32(37, tcpIncsumerrors_);
    }
    if (tcpRtoalgorithm_ != 0) {
      output.writeInt32(38, tcpRtoalgorithm_);
    }
    if (ipForwdatagrams_ != 0) {
      output.writeInt32(39, ipForwdatagrams_);
    }
    if (icmpInsrcquenchs_ != 0) {
      output.writeInt32(40, icmpInsrcquenchs_);
    }
    if (icmpOutdestunreachs_ != 0) {
      output.writeInt32(41, icmpOutdestunreachs_);
    }
    if (icmpOutparmprobs_ != 0) {
      output.writeInt32(42, icmpOutparmprobs_);
    }
    if (ipOutnoroutes_ != 0) {
      output.writeInt32(43, ipOutnoroutes_);
    }
    if (icmpInechoreps_ != 0) {
      output.writeInt32(44, icmpInechoreps_);
    }
    if (udpliteInerrors_ != 0) {
      output.writeInt32(45, udpliteInerrors_);
    }
    if (tcpCurrestab_ != 0) {
      output.writeInt32(46, tcpCurrestab_);
    }
    if (ipInunknownprotos_ != 0) {
      output.writeInt32(47, ipInunknownprotos_);
    }
    if (icmpInechos_ != 0) {
      output.writeInt32(48, icmpInechos_);
    }
    if (icmpInparmprobs_ != 0) {
      output.writeInt32(49, icmpInparmprobs_);
    }
    if (icmpInerrors_ != 0) {
      output.writeInt32(50, icmpInerrors_);
    }
    if (tcpActiveopens_ != 0) {
      output.writeInt32(51, tcpActiveopens_);
    }
    if (tcpOutrsts_ != 0) {
      output.writeInt32(52, tcpOutrsts_);
    }
    if (udpliteIgnoredmulti_ != 0) {
      output.writeInt32(53, udpliteIgnoredmulti_);
    }
    if (ipForwarding_ != 0) {
      output.writeInt32(54, ipForwarding_);
    }
    if (ipInreceives_ != 0L) {
      output.writeInt64(55, ipInreceives_);
    }
    if (ipOutdiscards_ != 0) {
      output.writeInt32(56, ipOutdiscards_);
    }
    if (icmpInredirects_ != 0) {
      output.writeInt32(57, icmpInredirects_);
    }
    if (icmpInaddrmaskreps_ != 0) {
      output.writeInt32(58, icmpInaddrmaskreps_);
    }
    if (icmpInaddrmasks_ != 0) {
      output.writeInt32(59, icmpInaddrmasks_);
    }
    if (icmpOuterrors_ != 0) {
      output.writeInt32(60, icmpOuterrors_);
    }
    if (tcpOutsegs_ != 0L) {
      output.writeInt64(61, tcpOutsegs_);
    }
    if (ipDefaultttl_ != 0) {
      output.writeInt32(62, ipDefaultttl_);
    }
    if (ipInaddrerrors_ != 0) {
      output.writeInt32(63, ipInaddrerrors_);
    }
    if (icmpOutsrcquenchs_ != 0) {
      output.writeInt32(64, icmpOutsrcquenchs_);
    }
    if (icmpOutredirects_ != 0) {
      output.writeInt32(65, icmpOutredirects_);
    }
    if (tcpEstabresets_ != 0L) {
      output.writeInt64(66, tcpEstabresets_);
    }
    if (udpliteSndbuferrors_ != 0) {
      output.writeInt32(67, udpliteSndbuferrors_);
    }
    if (ipOutrequests_ != 0L) {
      output.writeInt64(68, ipOutrequests_);
    }
    if (icmpOutmsgs_ != 0) {
      output.writeInt32(69, icmpOutmsgs_);
    }
    if (tcpRetranssegs_ != 0L) {
      output.writeInt64(70, tcpRetranssegs_);
    }
    if (udpOutdatagrams_ != 0L) {
      output.writeInt64(71, udpOutdatagrams_);
    }
    if (udpSndbuferrors_ != 0) {
      output.writeInt32(72, udpSndbuferrors_);
    }
    if (icmpIntimestamps_ != 0) {
      output.writeInt32(73, icmpIntimestamps_);
    }
    if (icmpIndestunreachs_ != 0) {
      output.writeInt32(74, icmpIndestunreachs_);
    }
    if (icmpmsgOuttype0_ != 0) {
      output.writeInt32(75, icmpmsgOuttype0_);
    }
    if (udpIndatagrams_ != 0) {
      output.writeInt32(76, udpIndatagrams_);
    }
    if (udpInerrors_ != 0) {
      output.writeInt32(77, udpInerrors_);
    }
    if (udpliteIncsumerrors_ != 0) {
      output.writeInt32(78, udpliteIncsumerrors_);
    }
    if (ipInhdrerrors_ != 0) {
      output.writeInt32(79, ipInhdrerrors_);
    }
    if (icmpIntimestampreps_ != 0) {
      output.writeInt32(80, icmpIntimestampreps_);
    }
    if (icmpmsgIntype3_ != 0) {
      output.writeInt32(81, icmpmsgIntype3_);
    }
    if (tcpAttemptfails_ != 0) {
      output.writeInt32(82, tcpAttemptfails_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getInterfaceBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, interface_);
    }
    if (udpRcvbuferrors_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, udpRcvbuferrors_);
    }
    if (ipIndiscards_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, ipIndiscards_);
    }
    if (icmpOuttimestampreps_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, icmpOuttimestampreps_);
    }
    if (icmpOutechos_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, icmpOutechos_);
    }
    if (udpIgnoredmulti_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(6, udpIgnoredmulti_);
    }
    if (udpliteOutdatagrams_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(7, udpliteOutdatagrams_);
    }
    if (ipReasmtimeout_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(8, ipReasmtimeout_);
    }
    if (ipFragoks_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(9, ipFragoks_);
    }
    if (icmpInmsgs_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(10, icmpInmsgs_);
    }
    if (udpIncsumerrors_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(11, udpIncsumerrors_);
    }
    if (ipReasmreqds_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(12, ipReasmreqds_);
    }
    if (icmpOutaddrmasks_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(13, icmpOutaddrmasks_);
    }
    if (tcpRtomax_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(14, tcpRtomax_);
    }
    if (udpliteRcvbuferrors_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(15, udpliteRcvbuferrors_);
    }
    if (ipReasmfails_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(16, ipReasmfails_);
    }
    if (tcpMaxconn_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(17, tcpMaxconn_);
    }
    if (tcpRtomin_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(18, tcpRtomin_);
    }
    if (tcpPassiveopens_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(19, tcpPassiveopens_);
    }
    if (ipFragcreates_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(20, ipFragcreates_);
    }
    if (icmpIncsumerrors_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(21, icmpIncsumerrors_);
    }
    if (udpliteIndatagrams_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(22, udpliteIndatagrams_);
    }
    if (ipReasmoks_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(23, ipReasmoks_);
    }
    if (icmpIntimeexcds_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(24, icmpIntimeexcds_);
    }
    if (icmpOuttimeexcds_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(25, icmpOuttimeexcds_);
    }
    if (tcpInerrs_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(26, tcpInerrs_);
    }
    if (icmpOutaddrmaskreps_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(27, icmpOutaddrmaskreps_);
    }
    if (icmpmsgOuttype_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(28, icmpmsgOuttype_);
    }
    if (udpNoports_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(29, udpNoports_);
    }
    if (icmpmsgIntype8_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(30, icmpmsgIntype8_);
    }
    if (tcpInsegs_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(31, tcpInsegs_);
    }
    if (udpliteNoports_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(32, udpliteNoports_);
    }
    if (ipFragfails_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(33, ipFragfails_);
    }
    if (ipIndelivers_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(34, ipIndelivers_);
    }
    if (icmpOuttimestamps_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(35, icmpOuttimestamps_);
    }
    if (icmpOutechoreps_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(36, icmpOutechoreps_);
    }
    if (tcpIncsumerrors_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(37, tcpIncsumerrors_);
    }
    if (tcpRtoalgorithm_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(38, tcpRtoalgorithm_);
    }
    if (ipForwdatagrams_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(39, ipForwdatagrams_);
    }
    if (icmpInsrcquenchs_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(40, icmpInsrcquenchs_);
    }
    if (icmpOutdestunreachs_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(41, icmpOutdestunreachs_);
    }
    if (icmpOutparmprobs_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(42, icmpOutparmprobs_);
    }
    if (ipOutnoroutes_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(43, ipOutnoroutes_);
    }
    if (icmpInechoreps_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(44, icmpInechoreps_);
    }
    if (udpliteInerrors_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(45, udpliteInerrors_);
    }
    if (tcpCurrestab_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(46, tcpCurrestab_);
    }
    if (ipInunknownprotos_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(47, ipInunknownprotos_);
    }
    if (icmpInechos_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(48, icmpInechos_);
    }
    if (icmpInparmprobs_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(49, icmpInparmprobs_);
    }
    if (icmpInerrors_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(50, icmpInerrors_);
    }
    if (tcpActiveopens_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(51, tcpActiveopens_);
    }
    if (tcpOutrsts_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(52, tcpOutrsts_);
    }
    if (udpliteIgnoredmulti_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(53, udpliteIgnoredmulti_);
    }
    if (ipForwarding_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(54, ipForwarding_);
    }
    if (ipInreceives_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(55, ipInreceives_);
    }
    if (ipOutdiscards_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(56, ipOutdiscards_);
    }
    if (icmpInredirects_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(57, icmpInredirects_);
    }
    if (icmpInaddrmaskreps_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(58, icmpInaddrmaskreps_);
    }
    if (icmpInaddrmasks_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(59, icmpInaddrmasks_);
    }
    if (icmpOuterrors_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(60, icmpOuterrors_);
    }
    if (tcpOutsegs_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(61, tcpOutsegs_);
    }
    if (ipDefaultttl_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(62, ipDefaultttl_);
    }
    if (ipInaddrerrors_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(63, ipInaddrerrors_);
    }
    if (icmpOutsrcquenchs_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(64, icmpOutsrcquenchs_);
    }
    if (icmpOutredirects_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(65, icmpOutredirects_);
    }
    if (tcpEstabresets_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(66, tcpEstabresets_);
    }
    if (udpliteSndbuferrors_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(67, udpliteSndbuferrors_);
    }
    if (ipOutrequests_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(68, ipOutrequests_);
    }
    if (icmpOutmsgs_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(69, icmpOutmsgs_);
    }
    if (tcpRetranssegs_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(70, tcpRetranssegs_);
    }
    if (udpOutdatagrams_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(71, udpOutdatagrams_);
    }
    if (udpSndbuferrors_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(72, udpSndbuferrors_);
    }
    if (icmpIntimestamps_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(73, icmpIntimestamps_);
    }
    if (icmpIndestunreachs_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(74, icmpIndestunreachs_);
    }
    if (icmpmsgOuttype0_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(75, icmpmsgOuttype0_);
    }
    if (udpIndatagrams_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(76, udpIndatagrams_);
    }
    if (udpInerrors_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(77, udpInerrors_);
    }
    if (udpliteIncsumerrors_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(78, udpliteIncsumerrors_);
    }
    if (ipInhdrerrors_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(79, ipInhdrerrors_);
    }
    if (icmpIntimestampreps_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(80, icmpIntimestampreps_);
    }
    if (icmpmsgIntype3_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(81, icmpmsgIntype3_);
    }
    if (tcpAttemptfails_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(82, tcpAttemptfails_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.cloud.example.protobuf.NetMetrics2)) {
      return super.equals(obj);
    }
    com.google.cloud.example.protobuf.NetMetrics2 other = (com.google.cloud.example.protobuf.NetMetrics2) obj;

    boolean result = true;
    result = result && getInterface()
        .equals(other.getInterface());
    result = result && (getUdpRcvbuferrors()
        == other.getUdpRcvbuferrors());
    result = result && (getIpIndiscards()
        == other.getIpIndiscards());
    result = result && (getIcmpOuttimestampreps()
        == other.getIcmpOuttimestampreps());
    result = result && (getIcmpOutechos()
        == other.getIcmpOutechos());
    result = result && (getUdpIgnoredmulti()
        == other.getUdpIgnoredmulti());
    result = result && (getUdpliteOutdatagrams()
        == other.getUdpliteOutdatagrams());
    result = result && (getIpReasmtimeout()
        == other.getIpReasmtimeout());
    result = result && (getIpFragoks()
        == other.getIpFragoks());
    result = result && (getIcmpInmsgs()
        == other.getIcmpInmsgs());
    result = result && (getUdpIncsumerrors()
        == other.getUdpIncsumerrors());
    result = result && (getIpReasmreqds()
        == other.getIpReasmreqds());
    result = result && (getIcmpOutaddrmasks()
        == other.getIcmpOutaddrmasks());
    result = result && (getTcpRtomax()
        == other.getTcpRtomax());
    result = result && (getUdpliteRcvbuferrors()
        == other.getUdpliteRcvbuferrors());
    result = result && (getIpReasmfails()
        == other.getIpReasmfails());
    result = result && (getTcpMaxconn()
        == other.getTcpMaxconn());
    result = result && (getTcpRtomin()
        == other.getTcpRtomin());
    result = result && (getTcpPassiveopens()
        == other.getTcpPassiveopens());
    result = result && (getIpFragcreates()
        == other.getIpFragcreates());
    result = result && (getIcmpIncsumerrors()
        == other.getIcmpIncsumerrors());
    result = result && (getUdpliteIndatagrams()
        == other.getUdpliteIndatagrams());
    result = result && (getIpReasmoks()
        == other.getIpReasmoks());
    result = result && (getIcmpIntimeexcds()
        == other.getIcmpIntimeexcds());
    result = result && (getIcmpOuttimeexcds()
        == other.getIcmpOuttimeexcds());
    result = result && (getTcpInerrs()
        == other.getTcpInerrs());
    result = result && (getIcmpOutaddrmaskreps()
        == other.getIcmpOutaddrmaskreps());
    result = result && (getIcmpmsgOuttype()
        == other.getIcmpmsgOuttype());
    result = result && (getUdpNoports()
        == other.getUdpNoports());
    result = result && (getIcmpmsgIntype8()
        == other.getIcmpmsgIntype8());
    result = result && (getTcpInsegs()
        == other.getTcpInsegs());
    result = result && (getUdpliteNoports()
        == other.getUdpliteNoports());
    result = result && (getIpFragfails()
        == other.getIpFragfails());
    result = result && (getIpIndelivers()
        == other.getIpIndelivers());
    result = result && (getIcmpOuttimestamps()
        == other.getIcmpOuttimestamps());
    result = result && (getIcmpOutechoreps()
        == other.getIcmpOutechoreps());
    result = result && (getTcpIncsumerrors()
        == other.getTcpIncsumerrors());
    result = result && (getTcpRtoalgorithm()
        == other.getTcpRtoalgorithm());
    result = result && (getIpForwdatagrams()
        == other.getIpForwdatagrams());
    result = result && (getIcmpInsrcquenchs()
        == other.getIcmpInsrcquenchs());
    result = result && (getIcmpOutdestunreachs()
        == other.getIcmpOutdestunreachs());
    result = result && (getIcmpOutparmprobs()
        == other.getIcmpOutparmprobs());
    result = result && (getIpOutnoroutes()
        == other.getIpOutnoroutes());
    result = result && (getIcmpInechoreps()
        == other.getIcmpInechoreps());
    result = result && (getUdpliteInerrors()
        == other.getUdpliteInerrors());
    result = result && (getTcpCurrestab()
        == other.getTcpCurrestab());
    result = result && (getIpInunknownprotos()
        == other.getIpInunknownprotos());
    result = result && (getIcmpInechos()
        == other.getIcmpInechos());
    result = result && (getIcmpInparmprobs()
        == other.getIcmpInparmprobs());
    result = result && (getIcmpInerrors()
        == other.getIcmpInerrors());
    result = result && (getTcpActiveopens()
        == other.getTcpActiveopens());
    result = result && (getTcpOutrsts()
        == other.getTcpOutrsts());
    result = result && (getUdpliteIgnoredmulti()
        == other.getUdpliteIgnoredmulti());
    result = result && (getIpForwarding()
        == other.getIpForwarding());
    result = result && (getIpInreceives()
        == other.getIpInreceives());
    result = result && (getIpOutdiscards()
        == other.getIpOutdiscards());
    result = result && (getIcmpInredirects()
        == other.getIcmpInredirects());
    result = result && (getIcmpInaddrmaskreps()
        == other.getIcmpInaddrmaskreps());
    result = result && (getIcmpInaddrmasks()
        == other.getIcmpInaddrmasks());
    result = result && (getIcmpOuterrors()
        == other.getIcmpOuterrors());
    result = result && (getTcpOutsegs()
        == other.getTcpOutsegs());
    result = result && (getIpDefaultttl()
        == other.getIpDefaultttl());
    result = result && (getIpInaddrerrors()
        == other.getIpInaddrerrors());
    result = result && (getIcmpOutsrcquenchs()
        == other.getIcmpOutsrcquenchs());
    result = result && (getIcmpOutredirects()
        == other.getIcmpOutredirects());
    result = result && (getTcpEstabresets()
        == other.getTcpEstabresets());
    result = result && (getUdpliteSndbuferrors()
        == other.getUdpliteSndbuferrors());
    result = result && (getIpOutrequests()
        == other.getIpOutrequests());
    result = result && (getIcmpOutmsgs()
        == other.getIcmpOutmsgs());
    result = result && (getTcpRetranssegs()
        == other.getTcpRetranssegs());
    result = result && (getUdpOutdatagrams()
        == other.getUdpOutdatagrams());
    result = result && (getUdpSndbuferrors()
        == other.getUdpSndbuferrors());
    result = result && (getIcmpIntimestamps()
        == other.getIcmpIntimestamps());
    result = result && (getIcmpIndestunreachs()
        == other.getIcmpIndestunreachs());
    result = result && (getIcmpmsgOuttype0()
        == other.getIcmpmsgOuttype0());
    result = result && (getUdpIndatagrams()
        == other.getUdpIndatagrams());
    result = result && (getUdpInerrors()
        == other.getUdpInerrors());
    result = result && (getUdpliteIncsumerrors()
        == other.getUdpliteIncsumerrors());
    result = result && (getIpInhdrerrors()
        == other.getIpInhdrerrors());
    result = result && (getIcmpIntimestampreps()
        == other.getIcmpIntimestampreps());
    result = result && (getIcmpmsgIntype3()
        == other.getIcmpmsgIntype3());
    result = result && (getTcpAttemptfails()
        == other.getTcpAttemptfails());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + INTERFACE_FIELD_NUMBER;
    hash = (53 * hash) + getInterface().hashCode();
    hash = (37 * hash) + UDP_RCVBUFERRORS_FIELD_NUMBER;
    hash = (53 * hash) + getUdpRcvbuferrors();
    hash = (37 * hash) + IP_INDISCARDS_FIELD_NUMBER;
    hash = (53 * hash) + getIpIndiscards();
    hash = (37 * hash) + ICMP_OUTTIMESTAMPREPS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpOuttimestampreps();
    hash = (37 * hash) + ICMP_OUTECHOS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpOutechos();
    hash = (37 * hash) + UDP_IGNOREDMULTI_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getUdpIgnoredmulti());
    hash = (37 * hash) + UDPLITE_OUTDATAGRAMS_FIELD_NUMBER;
    hash = (53 * hash) + getUdpliteOutdatagrams();
    hash = (37 * hash) + IP_REASMTIMEOUT_FIELD_NUMBER;
    hash = (53 * hash) + getIpReasmtimeout();
    hash = (37 * hash) + IP_FRAGOKS_FIELD_NUMBER;
    hash = (53 * hash) + getIpFragoks();
    hash = (37 * hash) + ICMP_INMSGS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpInmsgs();
    hash = (37 * hash) + UDP_INCSUMERRORS_FIELD_NUMBER;
    hash = (53 * hash) + getUdpIncsumerrors();
    hash = (37 * hash) + IP_REASMREQDS_FIELD_NUMBER;
    hash = (53 * hash) + getIpReasmreqds();
    hash = (37 * hash) + ICMP_OUTADDRMASKS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpOutaddrmasks();
    hash = (37 * hash) + TCP_RTOMAX_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTcpRtomax());
    hash = (37 * hash) + UDPLITE_RCVBUFERRORS_FIELD_NUMBER;
    hash = (53 * hash) + getUdpliteRcvbuferrors();
    hash = (37 * hash) + IP_REASMFAILS_FIELD_NUMBER;
    hash = (53 * hash) + getIpReasmfails();
    hash = (37 * hash) + TCP_MAXCONN_FIELD_NUMBER;
    hash = (53 * hash) + getTcpMaxconn();
    hash = (37 * hash) + TCP_RTOMIN_FIELD_NUMBER;
    hash = (53 * hash) + getTcpRtomin();
    hash = (37 * hash) + TCP_PASSIVEOPENS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTcpPassiveopens());
    hash = (37 * hash) + IP_FRAGCREATES_FIELD_NUMBER;
    hash = (53 * hash) + getIpFragcreates();
    hash = (37 * hash) + ICMP_INCSUMERRORS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpIncsumerrors();
    hash = (37 * hash) + UDPLITE_INDATAGRAMS_FIELD_NUMBER;
    hash = (53 * hash) + getUdpliteIndatagrams();
    hash = (37 * hash) + IP_REASMOKS_FIELD_NUMBER;
    hash = (53 * hash) + getIpReasmoks();
    hash = (37 * hash) + ICMP_INTIMEEXCDS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpIntimeexcds();
    hash = (37 * hash) + ICMP_OUTTIMEEXCDS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpOuttimeexcds();
    hash = (37 * hash) + TCP_INERRS_FIELD_NUMBER;
    hash = (53 * hash) + getTcpInerrs();
    hash = (37 * hash) + ICMP_OUTADDRMASKREPS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpOutaddrmaskreps();
    hash = (37 * hash) + ICMPMSG_OUTTYPE_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpmsgOuttype();
    hash = (37 * hash) + UDP_NOPORTS_FIELD_NUMBER;
    hash = (53 * hash) + getUdpNoports();
    hash = (37 * hash) + ICMPMSG_INTYPE8_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpmsgIntype8();
    hash = (37 * hash) + TCP_INSEGS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTcpInsegs());
    hash = (37 * hash) + UDPLITE_NOPORTS_FIELD_NUMBER;
    hash = (53 * hash) + getUdpliteNoports();
    hash = (37 * hash) + IP_FRAGFAILS_FIELD_NUMBER;
    hash = (53 * hash) + getIpFragfails();
    hash = (37 * hash) + IP_INDELIVERS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getIpIndelivers());
    hash = (37 * hash) + ICMP_OUTTIMESTAMPS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpOuttimestamps();
    hash = (37 * hash) + ICMP_OUTECHOREPS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpOutechoreps();
    hash = (37 * hash) + TCP_INCSUMERRORS_FIELD_NUMBER;
    hash = (53 * hash) + getTcpIncsumerrors();
    hash = (37 * hash) + TCP_RTOALGORITHM_FIELD_NUMBER;
    hash = (53 * hash) + getTcpRtoalgorithm();
    hash = (37 * hash) + IP_FORWDATAGRAMS_FIELD_NUMBER;
    hash = (53 * hash) + getIpForwdatagrams();
    hash = (37 * hash) + ICMP_INSRCQUENCHS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpInsrcquenchs();
    hash = (37 * hash) + ICMP_OUTDESTUNREACHS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpOutdestunreachs();
    hash = (37 * hash) + ICMP_OUTPARMPROBS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpOutparmprobs();
    hash = (37 * hash) + IP_OUTNOROUTES_FIELD_NUMBER;
    hash = (53 * hash) + getIpOutnoroutes();
    hash = (37 * hash) + ICMP_INECHOREPS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpInechoreps();
    hash = (37 * hash) + UDPLITE_INERRORS_FIELD_NUMBER;
    hash = (53 * hash) + getUdpliteInerrors();
    hash = (37 * hash) + TCP_CURRESTAB_FIELD_NUMBER;
    hash = (53 * hash) + getTcpCurrestab();
    hash = (37 * hash) + IP_INUNKNOWNPROTOS_FIELD_NUMBER;
    hash = (53 * hash) + getIpInunknownprotos();
    hash = (37 * hash) + ICMP_INECHOS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpInechos();
    hash = (37 * hash) + ICMP_INPARMPROBS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpInparmprobs();
    hash = (37 * hash) + ICMP_INERRORS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpInerrors();
    hash = (37 * hash) + TCP_ACTIVEOPENS_FIELD_NUMBER;
    hash = (53 * hash) + getTcpActiveopens();
    hash = (37 * hash) + TCP_OUTRSTS_FIELD_NUMBER;
    hash = (53 * hash) + getTcpOutrsts();
    hash = (37 * hash) + UDPLITE_IGNOREDMULTI_FIELD_NUMBER;
    hash = (53 * hash) + getUdpliteIgnoredmulti();
    hash = (37 * hash) + IP_FORWARDING_FIELD_NUMBER;
    hash = (53 * hash) + getIpForwarding();
    hash = (37 * hash) + IP_INRECEIVES_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getIpInreceives());
    hash = (37 * hash) + IP_OUTDISCARDS_FIELD_NUMBER;
    hash = (53 * hash) + getIpOutdiscards();
    hash = (37 * hash) + ICMP_INREDIRECTS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpInredirects();
    hash = (37 * hash) + ICMP_INADDRMASKREPS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpInaddrmaskreps();
    hash = (37 * hash) + ICMP_INADDRMASKS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpInaddrmasks();
    hash = (37 * hash) + ICMP_OUTERRORS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpOuterrors();
    hash = (37 * hash) + TCP_OUTSEGS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTcpOutsegs());
    hash = (37 * hash) + IP_DEFAULTTTL_FIELD_NUMBER;
    hash = (53 * hash) + getIpDefaultttl();
    hash = (37 * hash) + IP_INADDRERRORS_FIELD_NUMBER;
    hash = (53 * hash) + getIpInaddrerrors();
    hash = (37 * hash) + ICMP_OUTSRCQUENCHS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpOutsrcquenchs();
    hash = (37 * hash) + ICMP_OUTREDIRECTS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpOutredirects();
    hash = (37 * hash) + TCP_ESTABRESETS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTcpEstabresets());
    hash = (37 * hash) + UDPLITE_SNDBUFERRORS_FIELD_NUMBER;
    hash = (53 * hash) + getUdpliteSndbuferrors();
    hash = (37 * hash) + IP_OUTREQUESTS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getIpOutrequests());
    hash = (37 * hash) + ICMP_OUTMSGS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpOutmsgs();
    hash = (37 * hash) + TCP_RETRANSSEGS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTcpRetranssegs());
    hash = (37 * hash) + UDP_OUTDATAGRAMS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getUdpOutdatagrams());
    hash = (37 * hash) + UDP_SNDBUFERRORS_FIELD_NUMBER;
    hash = (53 * hash) + getUdpSndbuferrors();
    hash = (37 * hash) + ICMP_INTIMESTAMPS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpIntimestamps();
    hash = (37 * hash) + ICMP_INDESTUNREACHS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpIndestunreachs();
    hash = (37 * hash) + ICMPMSG_OUTTYPE0_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpmsgOuttype0();
    hash = (37 * hash) + UDP_INDATAGRAMS_FIELD_NUMBER;
    hash = (53 * hash) + getUdpIndatagrams();
    hash = (37 * hash) + UDP_INERRORS_FIELD_NUMBER;
    hash = (53 * hash) + getUdpInerrors();
    hash = (37 * hash) + UDPLITE_INCSUMERRORS_FIELD_NUMBER;
    hash = (53 * hash) + getUdpliteIncsumerrors();
    hash = (37 * hash) + IP_INHDRERRORS_FIELD_NUMBER;
    hash = (53 * hash) + getIpInhdrerrors();
    hash = (37 * hash) + ICMP_INTIMESTAMPREPS_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpIntimestampreps();
    hash = (37 * hash) + ICMPMSG_INTYPE3_FIELD_NUMBER;
    hash = (53 * hash) + getIcmpmsgIntype3();
    hash = (37 * hash) + TCP_ATTEMPTFAILS_FIELD_NUMBER;
    hash = (53 * hash) + getTcpAttemptfails();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.example.protobuf.NetMetrics2 parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.example.protobuf.NetMetrics2 parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.example.protobuf.NetMetrics2 parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.example.protobuf.NetMetrics2 parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.example.protobuf.NetMetrics2 parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.example.protobuf.NetMetrics2 parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.example.protobuf.NetMetrics2 parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.example.protobuf.NetMetrics2 parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.example.protobuf.NetMetrics2 parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.cloud.example.protobuf.NetMetrics2 parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.example.protobuf.NetMetrics2 parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.example.protobuf.NetMetrics2 parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.cloud.example.protobuf.NetMetrics2 prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code google.protobuf.example.NetMetrics2}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.protobuf.example.NetMetrics2)
      com.google.cloud.example.protobuf.NetMetrics2OrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.cloud.example.protobuf.MetricsProto.internal_static_google_protobuf_example_NetMetrics2_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.example.protobuf.MetricsProto.internal_static_google_protobuf_example_NetMetrics2_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.example.protobuf.NetMetrics2.class, com.google.cloud.example.protobuf.NetMetrics2.Builder.class);
    }

    // Construct using com.google.cloud.example.protobuf.NetMetrics2.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      interface_ = "";

      udpRcvbuferrors_ = 0;

      ipIndiscards_ = 0;

      icmpOuttimestampreps_ = 0;

      icmpOutechos_ = 0;

      udpIgnoredmulti_ = 0L;

      udpliteOutdatagrams_ = 0;

      ipReasmtimeout_ = 0;

      ipFragoks_ = 0;

      icmpInmsgs_ = 0;

      udpIncsumerrors_ = 0;

      ipReasmreqds_ = 0;

      icmpOutaddrmasks_ = 0;

      tcpRtomax_ = 0L;

      udpliteRcvbuferrors_ = 0;

      ipReasmfails_ = 0;

      tcpMaxconn_ = 0;

      tcpRtomin_ = 0;

      tcpPassiveopens_ = 0L;

      ipFragcreates_ = 0;

      icmpIncsumerrors_ = 0;

      udpliteIndatagrams_ = 0;

      ipReasmoks_ = 0;

      icmpIntimeexcds_ = 0;

      icmpOuttimeexcds_ = 0;

      tcpInerrs_ = 0;

      icmpOutaddrmaskreps_ = 0;

      icmpmsgOuttype_ = 0;

      udpNoports_ = 0;

      icmpmsgIntype8_ = 0;

      tcpInsegs_ = 0L;

      udpliteNoports_ = 0;

      ipFragfails_ = 0;

      ipIndelivers_ = 0L;

      icmpOuttimestamps_ = 0;

      icmpOutechoreps_ = 0;

      tcpIncsumerrors_ = 0;

      tcpRtoalgorithm_ = 0;

      ipForwdatagrams_ = 0;

      icmpInsrcquenchs_ = 0;

      icmpOutdestunreachs_ = 0;

      icmpOutparmprobs_ = 0;

      ipOutnoroutes_ = 0;

      icmpInechoreps_ = 0;

      udpliteInerrors_ = 0;

      tcpCurrestab_ = 0;

      ipInunknownprotos_ = 0;

      icmpInechos_ = 0;

      icmpInparmprobs_ = 0;

      icmpInerrors_ = 0;

      tcpActiveopens_ = 0;

      tcpOutrsts_ = 0;

      udpliteIgnoredmulti_ = 0;

      ipForwarding_ = 0;

      ipInreceives_ = 0L;

      ipOutdiscards_ = 0;

      icmpInredirects_ = 0;

      icmpInaddrmaskreps_ = 0;

      icmpInaddrmasks_ = 0;

      icmpOuterrors_ = 0;

      tcpOutsegs_ = 0L;

      ipDefaultttl_ = 0;

      ipInaddrerrors_ = 0;

      icmpOutsrcquenchs_ = 0;

      icmpOutredirects_ = 0;

      tcpEstabresets_ = 0L;

      udpliteSndbuferrors_ = 0;

      ipOutrequests_ = 0L;

      icmpOutmsgs_ = 0;

      tcpRetranssegs_ = 0L;

      udpOutdatagrams_ = 0L;

      udpSndbuferrors_ = 0;

      icmpIntimestamps_ = 0;

      icmpIndestunreachs_ = 0;

      icmpmsgOuttype0_ = 0;

      udpIndatagrams_ = 0;

      udpInerrors_ = 0;

      udpliteIncsumerrors_ = 0;

      ipInhdrerrors_ = 0;

      icmpIntimestampreps_ = 0;

      icmpmsgIntype3_ = 0;

      tcpAttemptfails_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.cloud.example.protobuf.MetricsProto.internal_static_google_protobuf_example_NetMetrics2_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.example.protobuf.NetMetrics2 getDefaultInstanceForType() {
      return com.google.cloud.example.protobuf.NetMetrics2.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.example.protobuf.NetMetrics2 build() {
      com.google.cloud.example.protobuf.NetMetrics2 result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.example.protobuf.NetMetrics2 buildPartial() {
      com.google.cloud.example.protobuf.NetMetrics2 result = new com.google.cloud.example.protobuf.NetMetrics2(this);
      result.interface_ = interface_;
      result.udpRcvbuferrors_ = udpRcvbuferrors_;
      result.ipIndiscards_ = ipIndiscards_;
      result.icmpOuttimestampreps_ = icmpOuttimestampreps_;
      result.icmpOutechos_ = icmpOutechos_;
      result.udpIgnoredmulti_ = udpIgnoredmulti_;
      result.udpliteOutdatagrams_ = udpliteOutdatagrams_;
      result.ipReasmtimeout_ = ipReasmtimeout_;
      result.ipFragoks_ = ipFragoks_;
      result.icmpInmsgs_ = icmpInmsgs_;
      result.udpIncsumerrors_ = udpIncsumerrors_;
      result.ipReasmreqds_ = ipReasmreqds_;
      result.icmpOutaddrmasks_ = icmpOutaddrmasks_;
      result.tcpRtomax_ = tcpRtomax_;
      result.udpliteRcvbuferrors_ = udpliteRcvbuferrors_;
      result.ipReasmfails_ = ipReasmfails_;
      result.tcpMaxconn_ = tcpMaxconn_;
      result.tcpRtomin_ = tcpRtomin_;
      result.tcpPassiveopens_ = tcpPassiveopens_;
      result.ipFragcreates_ = ipFragcreates_;
      result.icmpIncsumerrors_ = icmpIncsumerrors_;
      result.udpliteIndatagrams_ = udpliteIndatagrams_;
      result.ipReasmoks_ = ipReasmoks_;
      result.icmpIntimeexcds_ = icmpIntimeexcds_;
      result.icmpOuttimeexcds_ = icmpOuttimeexcds_;
      result.tcpInerrs_ = tcpInerrs_;
      result.icmpOutaddrmaskreps_ = icmpOutaddrmaskreps_;
      result.icmpmsgOuttype_ = icmpmsgOuttype_;
      result.udpNoports_ = udpNoports_;
      result.icmpmsgIntype8_ = icmpmsgIntype8_;
      result.tcpInsegs_ = tcpInsegs_;
      result.udpliteNoports_ = udpliteNoports_;
      result.ipFragfails_ = ipFragfails_;
      result.ipIndelivers_ = ipIndelivers_;
      result.icmpOuttimestamps_ = icmpOuttimestamps_;
      result.icmpOutechoreps_ = icmpOutechoreps_;
      result.tcpIncsumerrors_ = tcpIncsumerrors_;
      result.tcpRtoalgorithm_ = tcpRtoalgorithm_;
      result.ipForwdatagrams_ = ipForwdatagrams_;
      result.icmpInsrcquenchs_ = icmpInsrcquenchs_;
      result.icmpOutdestunreachs_ = icmpOutdestunreachs_;
      result.icmpOutparmprobs_ = icmpOutparmprobs_;
      result.ipOutnoroutes_ = ipOutnoroutes_;
      result.icmpInechoreps_ = icmpInechoreps_;
      result.udpliteInerrors_ = udpliteInerrors_;
      result.tcpCurrestab_ = tcpCurrestab_;
      result.ipInunknownprotos_ = ipInunknownprotos_;
      result.icmpInechos_ = icmpInechos_;
      result.icmpInparmprobs_ = icmpInparmprobs_;
      result.icmpInerrors_ = icmpInerrors_;
      result.tcpActiveopens_ = tcpActiveopens_;
      result.tcpOutrsts_ = tcpOutrsts_;
      result.udpliteIgnoredmulti_ = udpliteIgnoredmulti_;
      result.ipForwarding_ = ipForwarding_;
      result.ipInreceives_ = ipInreceives_;
      result.ipOutdiscards_ = ipOutdiscards_;
      result.icmpInredirects_ = icmpInredirects_;
      result.icmpInaddrmaskreps_ = icmpInaddrmaskreps_;
      result.icmpInaddrmasks_ = icmpInaddrmasks_;
      result.icmpOuterrors_ = icmpOuterrors_;
      result.tcpOutsegs_ = tcpOutsegs_;
      result.ipDefaultttl_ = ipDefaultttl_;
      result.ipInaddrerrors_ = ipInaddrerrors_;
      result.icmpOutsrcquenchs_ = icmpOutsrcquenchs_;
      result.icmpOutredirects_ = icmpOutredirects_;
      result.tcpEstabresets_ = tcpEstabresets_;
      result.udpliteSndbuferrors_ = udpliteSndbuferrors_;
      result.ipOutrequests_ = ipOutrequests_;
      result.icmpOutmsgs_ = icmpOutmsgs_;
      result.tcpRetranssegs_ = tcpRetranssegs_;
      result.udpOutdatagrams_ = udpOutdatagrams_;
      result.udpSndbuferrors_ = udpSndbuferrors_;
      result.icmpIntimestamps_ = icmpIntimestamps_;
      result.icmpIndestunreachs_ = icmpIndestunreachs_;
      result.icmpmsgOuttype0_ = icmpmsgOuttype0_;
      result.udpIndatagrams_ = udpIndatagrams_;
      result.udpInerrors_ = udpInerrors_;
      result.udpliteIncsumerrors_ = udpliteIncsumerrors_;
      result.ipInhdrerrors_ = ipInhdrerrors_;
      result.icmpIntimestampreps_ = icmpIntimestampreps_;
      result.icmpmsgIntype3_ = icmpmsgIntype3_;
      result.tcpAttemptfails_ = tcpAttemptfails_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.example.protobuf.NetMetrics2) {
        return mergeFrom((com.google.cloud.example.protobuf.NetMetrics2)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.example.protobuf.NetMetrics2 other) {
      if (other == com.google.cloud.example.protobuf.NetMetrics2.getDefaultInstance()) return this;
      if (!other.getInterface().isEmpty()) {
        interface_ = other.interface_;
        onChanged();
      }
      if (other.getUdpRcvbuferrors() != 0) {
        setUdpRcvbuferrors(other.getUdpRcvbuferrors());
      }
      if (other.getIpIndiscards() != 0) {
        setIpIndiscards(other.getIpIndiscards());
      }
      if (other.getIcmpOuttimestampreps() != 0) {
        setIcmpOuttimestampreps(other.getIcmpOuttimestampreps());
      }
      if (other.getIcmpOutechos() != 0) {
        setIcmpOutechos(other.getIcmpOutechos());
      }
      if (other.getUdpIgnoredmulti() != 0L) {
        setUdpIgnoredmulti(other.getUdpIgnoredmulti());
      }
      if (other.getUdpliteOutdatagrams() != 0) {
        setUdpliteOutdatagrams(other.getUdpliteOutdatagrams());
      }
      if (other.getIpReasmtimeout() != 0) {
        setIpReasmtimeout(other.getIpReasmtimeout());
      }
      if (other.getIpFragoks() != 0) {
        setIpFragoks(other.getIpFragoks());
      }
      if (other.getIcmpInmsgs() != 0) {
        setIcmpInmsgs(other.getIcmpInmsgs());
      }
      if (other.getUdpIncsumerrors() != 0) {
        setUdpIncsumerrors(other.getUdpIncsumerrors());
      }
      if (other.getIpReasmreqds() != 0) {
        setIpReasmreqds(other.getIpReasmreqds());
      }
      if (other.getIcmpOutaddrmasks() != 0) {
        setIcmpOutaddrmasks(other.getIcmpOutaddrmasks());
      }
      if (other.getTcpRtomax() != 0L) {
        setTcpRtomax(other.getTcpRtomax());
      }
      if (other.getUdpliteRcvbuferrors() != 0) {
        setUdpliteRcvbuferrors(other.getUdpliteRcvbuferrors());
      }
      if (other.getIpReasmfails() != 0) {
        setIpReasmfails(other.getIpReasmfails());
      }
      if (other.getTcpMaxconn() != 0) {
        setTcpMaxconn(other.getTcpMaxconn());
      }
      if (other.getTcpRtomin() != 0) {
        setTcpRtomin(other.getTcpRtomin());
      }
      if (other.getTcpPassiveopens() != 0L) {
        setTcpPassiveopens(other.getTcpPassiveopens());
      }
      if (other.getIpFragcreates() != 0) {
        setIpFragcreates(other.getIpFragcreates());
      }
      if (other.getIcmpIncsumerrors() != 0) {
        setIcmpIncsumerrors(other.getIcmpIncsumerrors());
      }
      if (other.getUdpliteIndatagrams() != 0) {
        setUdpliteIndatagrams(other.getUdpliteIndatagrams());
      }
      if (other.getIpReasmoks() != 0) {
        setIpReasmoks(other.getIpReasmoks());
      }
      if (other.getIcmpIntimeexcds() != 0) {
        setIcmpIntimeexcds(other.getIcmpIntimeexcds());
      }
      if (other.getIcmpOuttimeexcds() != 0) {
        setIcmpOuttimeexcds(other.getIcmpOuttimeexcds());
      }
      if (other.getTcpInerrs() != 0) {
        setTcpInerrs(other.getTcpInerrs());
      }
      if (other.getIcmpOutaddrmaskreps() != 0) {
        setIcmpOutaddrmaskreps(other.getIcmpOutaddrmaskreps());
      }
      if (other.getIcmpmsgOuttype() != 0) {
        setIcmpmsgOuttype(other.getIcmpmsgOuttype());
      }
      if (other.getUdpNoports() != 0) {
        setUdpNoports(other.getUdpNoports());
      }
      if (other.getIcmpmsgIntype8() != 0) {
        setIcmpmsgIntype8(other.getIcmpmsgIntype8());
      }
      if (other.getTcpInsegs() != 0L) {
        setTcpInsegs(other.getTcpInsegs());
      }
      if (other.getUdpliteNoports() != 0) {
        setUdpliteNoports(other.getUdpliteNoports());
      }
      if (other.getIpFragfails() != 0) {
        setIpFragfails(other.getIpFragfails());
      }
      if (other.getIpIndelivers() != 0L) {
        setIpIndelivers(other.getIpIndelivers());
      }
      if (other.getIcmpOuttimestamps() != 0) {
        setIcmpOuttimestamps(other.getIcmpOuttimestamps());
      }
      if (other.getIcmpOutechoreps() != 0) {
        setIcmpOutechoreps(other.getIcmpOutechoreps());
      }
      if (other.getTcpIncsumerrors() != 0) {
        setTcpIncsumerrors(other.getTcpIncsumerrors());
      }
      if (other.getTcpRtoalgorithm() != 0) {
        setTcpRtoalgorithm(other.getTcpRtoalgorithm());
      }
      if (other.getIpForwdatagrams() != 0) {
        setIpForwdatagrams(other.getIpForwdatagrams());
      }
      if (other.getIcmpInsrcquenchs() != 0) {
        setIcmpInsrcquenchs(other.getIcmpInsrcquenchs());
      }
      if (other.getIcmpOutdestunreachs() != 0) {
        setIcmpOutdestunreachs(other.getIcmpOutdestunreachs());
      }
      if (other.getIcmpOutparmprobs() != 0) {
        setIcmpOutparmprobs(other.getIcmpOutparmprobs());
      }
      if (other.getIpOutnoroutes() != 0) {
        setIpOutnoroutes(other.getIpOutnoroutes());
      }
      if (other.getIcmpInechoreps() != 0) {
        setIcmpInechoreps(other.getIcmpInechoreps());
      }
      if (other.getUdpliteInerrors() != 0) {
        setUdpliteInerrors(other.getUdpliteInerrors());
      }
      if (other.getTcpCurrestab() != 0) {
        setTcpCurrestab(other.getTcpCurrestab());
      }
      if (other.getIpInunknownprotos() != 0) {
        setIpInunknownprotos(other.getIpInunknownprotos());
      }
      if (other.getIcmpInechos() != 0) {
        setIcmpInechos(other.getIcmpInechos());
      }
      if (other.getIcmpInparmprobs() != 0) {
        setIcmpInparmprobs(other.getIcmpInparmprobs());
      }
      if (other.getIcmpInerrors() != 0) {
        setIcmpInerrors(other.getIcmpInerrors());
      }
      if (other.getTcpActiveopens() != 0) {
        setTcpActiveopens(other.getTcpActiveopens());
      }
      if (other.getTcpOutrsts() != 0) {
        setTcpOutrsts(other.getTcpOutrsts());
      }
      if (other.getUdpliteIgnoredmulti() != 0) {
        setUdpliteIgnoredmulti(other.getUdpliteIgnoredmulti());
      }
      if (other.getIpForwarding() != 0) {
        setIpForwarding(other.getIpForwarding());
      }
      if (other.getIpInreceives() != 0L) {
        setIpInreceives(other.getIpInreceives());
      }
      if (other.getIpOutdiscards() != 0) {
        setIpOutdiscards(other.getIpOutdiscards());
      }
      if (other.getIcmpInredirects() != 0) {
        setIcmpInredirects(other.getIcmpInredirects());
      }
      if (other.getIcmpInaddrmaskreps() != 0) {
        setIcmpInaddrmaskreps(other.getIcmpInaddrmaskreps());
      }
      if (other.getIcmpInaddrmasks() != 0) {
        setIcmpInaddrmasks(other.getIcmpInaddrmasks());
      }
      if (other.getIcmpOuterrors() != 0) {
        setIcmpOuterrors(other.getIcmpOuterrors());
      }
      if (other.getTcpOutsegs() != 0L) {
        setTcpOutsegs(other.getTcpOutsegs());
      }
      if (other.getIpDefaultttl() != 0) {
        setIpDefaultttl(other.getIpDefaultttl());
      }
      if (other.getIpInaddrerrors() != 0) {
        setIpInaddrerrors(other.getIpInaddrerrors());
      }
      if (other.getIcmpOutsrcquenchs() != 0) {
        setIcmpOutsrcquenchs(other.getIcmpOutsrcquenchs());
      }
      if (other.getIcmpOutredirects() != 0) {
        setIcmpOutredirects(other.getIcmpOutredirects());
      }
      if (other.getTcpEstabresets() != 0L) {
        setTcpEstabresets(other.getTcpEstabresets());
      }
      if (other.getUdpliteSndbuferrors() != 0) {
        setUdpliteSndbuferrors(other.getUdpliteSndbuferrors());
      }
      if (other.getIpOutrequests() != 0L) {
        setIpOutrequests(other.getIpOutrequests());
      }
      if (other.getIcmpOutmsgs() != 0) {
        setIcmpOutmsgs(other.getIcmpOutmsgs());
      }
      if (other.getTcpRetranssegs() != 0L) {
        setTcpRetranssegs(other.getTcpRetranssegs());
      }
      if (other.getUdpOutdatagrams() != 0L) {
        setUdpOutdatagrams(other.getUdpOutdatagrams());
      }
      if (other.getUdpSndbuferrors() != 0) {
        setUdpSndbuferrors(other.getUdpSndbuferrors());
      }
      if (other.getIcmpIntimestamps() != 0) {
        setIcmpIntimestamps(other.getIcmpIntimestamps());
      }
      if (other.getIcmpIndestunreachs() != 0) {
        setIcmpIndestunreachs(other.getIcmpIndestunreachs());
      }
      if (other.getIcmpmsgOuttype0() != 0) {
        setIcmpmsgOuttype0(other.getIcmpmsgOuttype0());
      }
      if (other.getUdpIndatagrams() != 0) {
        setUdpIndatagrams(other.getUdpIndatagrams());
      }
      if (other.getUdpInerrors() != 0) {
        setUdpInerrors(other.getUdpInerrors());
      }
      if (other.getUdpliteIncsumerrors() != 0) {
        setUdpliteIncsumerrors(other.getUdpliteIncsumerrors());
      }
      if (other.getIpInhdrerrors() != 0) {
        setIpInhdrerrors(other.getIpInhdrerrors());
      }
      if (other.getIcmpIntimestampreps() != 0) {
        setIcmpIntimestampreps(other.getIcmpIntimestampreps());
      }
      if (other.getIcmpmsgIntype3() != 0) {
        setIcmpmsgIntype3(other.getIcmpmsgIntype3());
      }
      if (other.getTcpAttemptfails() != 0) {
        setTcpAttemptfails(other.getTcpAttemptfails());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.cloud.example.protobuf.NetMetrics2 parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.cloud.example.protobuf.NetMetrics2) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object interface_ = "";
    /**
     * <code>string interface = 1;</code>
     */
    public java.lang.String getInterface() {
      java.lang.Object ref = interface_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        interface_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string interface = 1;</code>
     */
    public com.google.protobuf.ByteString
        getInterfaceBytes() {
      java.lang.Object ref = interface_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        interface_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string interface = 1;</code>
     */
    public Builder setInterface(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      interface_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string interface = 1;</code>
     */
    public Builder clearInterface() {
      
      interface_ = getDefaultInstance().getInterface();
      onChanged();
      return this;
    }
    /**
     * <code>string interface = 1;</code>
     */
    public Builder setInterfaceBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      interface_ = value;
      onChanged();
      return this;
    }

    private int udpRcvbuferrors_ ;
    /**
     * <code>int32 udp_rcvbuferrors = 2;</code>
     */
    public int getUdpRcvbuferrors() {
      return udpRcvbuferrors_;
    }
    /**
     * <code>int32 udp_rcvbuferrors = 2;</code>
     */
    public Builder setUdpRcvbuferrors(int value) {
      
      udpRcvbuferrors_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 udp_rcvbuferrors = 2;</code>
     */
    public Builder clearUdpRcvbuferrors() {
      
      udpRcvbuferrors_ = 0;
      onChanged();
      return this;
    }

    private int ipIndiscards_ ;
    /**
     * <code>int32 ip_indiscards = 3;</code>
     */
    public int getIpIndiscards() {
      return ipIndiscards_;
    }
    /**
     * <code>int32 ip_indiscards = 3;</code>
     */
    public Builder setIpIndiscards(int value) {
      
      ipIndiscards_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 ip_indiscards = 3;</code>
     */
    public Builder clearIpIndiscards() {
      
      ipIndiscards_ = 0;
      onChanged();
      return this;
    }

    private int icmpOuttimestampreps_ ;
    /**
     * <code>int32 icmp_outtimestampreps = 4;</code>
     */
    public int getIcmpOuttimestampreps() {
      return icmpOuttimestampreps_;
    }
    /**
     * <code>int32 icmp_outtimestampreps = 4;</code>
     */
    public Builder setIcmpOuttimestampreps(int value) {
      
      icmpOuttimestampreps_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_outtimestampreps = 4;</code>
     */
    public Builder clearIcmpOuttimestampreps() {
      
      icmpOuttimestampreps_ = 0;
      onChanged();
      return this;
    }

    private int icmpOutechos_ ;
    /**
     * <code>int32 icmp_outechos = 5;</code>
     */
    public int getIcmpOutechos() {
      return icmpOutechos_;
    }
    /**
     * <code>int32 icmp_outechos = 5;</code>
     */
    public Builder setIcmpOutechos(int value) {
      
      icmpOutechos_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_outechos = 5;</code>
     */
    public Builder clearIcmpOutechos() {
      
      icmpOutechos_ = 0;
      onChanged();
      return this;
    }

    private long udpIgnoredmulti_ ;
    /**
     * <code>int64 udp_ignoredmulti = 6;</code>
     */
    public long getUdpIgnoredmulti() {
      return udpIgnoredmulti_;
    }
    /**
     * <code>int64 udp_ignoredmulti = 6;</code>
     */
    public Builder setUdpIgnoredmulti(long value) {
      
      udpIgnoredmulti_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 udp_ignoredmulti = 6;</code>
     */
    public Builder clearUdpIgnoredmulti() {
      
      udpIgnoredmulti_ = 0L;
      onChanged();
      return this;
    }

    private int udpliteOutdatagrams_ ;
    /**
     * <code>int32 udplite_outdatagrams = 7;</code>
     */
    public int getUdpliteOutdatagrams() {
      return udpliteOutdatagrams_;
    }
    /**
     * <code>int32 udplite_outdatagrams = 7;</code>
     */
    public Builder setUdpliteOutdatagrams(int value) {
      
      udpliteOutdatagrams_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 udplite_outdatagrams = 7;</code>
     */
    public Builder clearUdpliteOutdatagrams() {
      
      udpliteOutdatagrams_ = 0;
      onChanged();
      return this;
    }

    private int ipReasmtimeout_ ;
    /**
     * <code>int32 ip_reasmtimeout = 8;</code>
     */
    public int getIpReasmtimeout() {
      return ipReasmtimeout_;
    }
    /**
     * <code>int32 ip_reasmtimeout = 8;</code>
     */
    public Builder setIpReasmtimeout(int value) {
      
      ipReasmtimeout_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 ip_reasmtimeout = 8;</code>
     */
    public Builder clearIpReasmtimeout() {
      
      ipReasmtimeout_ = 0;
      onChanged();
      return this;
    }

    private int ipFragoks_ ;
    /**
     * <code>int32 ip_fragoks = 9;</code>
     */
    public int getIpFragoks() {
      return ipFragoks_;
    }
    /**
     * <code>int32 ip_fragoks = 9;</code>
     */
    public Builder setIpFragoks(int value) {
      
      ipFragoks_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 ip_fragoks = 9;</code>
     */
    public Builder clearIpFragoks() {
      
      ipFragoks_ = 0;
      onChanged();
      return this;
    }

    private int icmpInmsgs_ ;
    /**
     * <code>int32 icmp_inmsgs = 10;</code>
     */
    public int getIcmpInmsgs() {
      return icmpInmsgs_;
    }
    /**
     * <code>int32 icmp_inmsgs = 10;</code>
     */
    public Builder setIcmpInmsgs(int value) {
      
      icmpInmsgs_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_inmsgs = 10;</code>
     */
    public Builder clearIcmpInmsgs() {
      
      icmpInmsgs_ = 0;
      onChanged();
      return this;
    }

    private int udpIncsumerrors_ ;
    /**
     * <code>int32 udp_incsumerrors = 11;</code>
     */
    public int getUdpIncsumerrors() {
      return udpIncsumerrors_;
    }
    /**
     * <code>int32 udp_incsumerrors = 11;</code>
     */
    public Builder setUdpIncsumerrors(int value) {
      
      udpIncsumerrors_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 udp_incsumerrors = 11;</code>
     */
    public Builder clearUdpIncsumerrors() {
      
      udpIncsumerrors_ = 0;
      onChanged();
      return this;
    }

    private int ipReasmreqds_ ;
    /**
     * <code>int32 ip_reasmreqds = 12;</code>
     */
    public int getIpReasmreqds() {
      return ipReasmreqds_;
    }
    /**
     * <code>int32 ip_reasmreqds = 12;</code>
     */
    public Builder setIpReasmreqds(int value) {
      
      ipReasmreqds_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 ip_reasmreqds = 12;</code>
     */
    public Builder clearIpReasmreqds() {
      
      ipReasmreqds_ = 0;
      onChanged();
      return this;
    }

    private int icmpOutaddrmasks_ ;
    /**
     * <code>int32 icmp_outaddrmasks = 13;</code>
     */
    public int getIcmpOutaddrmasks() {
      return icmpOutaddrmasks_;
    }
    /**
     * <code>int32 icmp_outaddrmasks = 13;</code>
     */
    public Builder setIcmpOutaddrmasks(int value) {
      
      icmpOutaddrmasks_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_outaddrmasks = 13;</code>
     */
    public Builder clearIcmpOutaddrmasks() {
      
      icmpOutaddrmasks_ = 0;
      onChanged();
      return this;
    }

    private long tcpRtomax_ ;
    /**
     * <code>int64 tcp_rtomax = 14;</code>
     */
    public long getTcpRtomax() {
      return tcpRtomax_;
    }
    /**
     * <code>int64 tcp_rtomax = 14;</code>
     */
    public Builder setTcpRtomax(long value) {
      
      tcpRtomax_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 tcp_rtomax = 14;</code>
     */
    public Builder clearTcpRtomax() {
      
      tcpRtomax_ = 0L;
      onChanged();
      return this;
    }

    private int udpliteRcvbuferrors_ ;
    /**
     * <code>int32 udplite_rcvbuferrors = 15;</code>
     */
    public int getUdpliteRcvbuferrors() {
      return udpliteRcvbuferrors_;
    }
    /**
     * <code>int32 udplite_rcvbuferrors = 15;</code>
     */
    public Builder setUdpliteRcvbuferrors(int value) {
      
      udpliteRcvbuferrors_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 udplite_rcvbuferrors = 15;</code>
     */
    public Builder clearUdpliteRcvbuferrors() {
      
      udpliteRcvbuferrors_ = 0;
      onChanged();
      return this;
    }

    private int ipReasmfails_ ;
    /**
     * <code>int32 ip_reasmfails = 16;</code>
     */
    public int getIpReasmfails() {
      return ipReasmfails_;
    }
    /**
     * <code>int32 ip_reasmfails = 16;</code>
     */
    public Builder setIpReasmfails(int value) {
      
      ipReasmfails_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 ip_reasmfails = 16;</code>
     */
    public Builder clearIpReasmfails() {
      
      ipReasmfails_ = 0;
      onChanged();
      return this;
    }

    private int tcpMaxconn_ ;
    /**
     * <code>int32 tcp_maxconn = 17;</code>
     */
    public int getTcpMaxconn() {
      return tcpMaxconn_;
    }
    /**
     * <code>int32 tcp_maxconn = 17;</code>
     */
    public Builder setTcpMaxconn(int value) {
      
      tcpMaxconn_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 tcp_maxconn = 17;</code>
     */
    public Builder clearTcpMaxconn() {
      
      tcpMaxconn_ = 0;
      onChanged();
      return this;
    }

    private int tcpRtomin_ ;
    /**
     * <code>int32 tcp_rtomin = 18;</code>
     */
    public int getTcpRtomin() {
      return tcpRtomin_;
    }
    /**
     * <code>int32 tcp_rtomin = 18;</code>
     */
    public Builder setTcpRtomin(int value) {
      
      tcpRtomin_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 tcp_rtomin = 18;</code>
     */
    public Builder clearTcpRtomin() {
      
      tcpRtomin_ = 0;
      onChanged();
      return this;
    }

    private long tcpPassiveopens_ ;
    /**
     * <code>int64 tcp_passiveopens = 19;</code>
     */
    public long getTcpPassiveopens() {
      return tcpPassiveopens_;
    }
    /**
     * <code>int64 tcp_passiveopens = 19;</code>
     */
    public Builder setTcpPassiveopens(long value) {
      
      tcpPassiveopens_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 tcp_passiveopens = 19;</code>
     */
    public Builder clearTcpPassiveopens() {
      
      tcpPassiveopens_ = 0L;
      onChanged();
      return this;
    }

    private int ipFragcreates_ ;
    /**
     * <code>int32 ip_fragcreates = 20;</code>
     */
    public int getIpFragcreates() {
      return ipFragcreates_;
    }
    /**
     * <code>int32 ip_fragcreates = 20;</code>
     */
    public Builder setIpFragcreates(int value) {
      
      ipFragcreates_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 ip_fragcreates = 20;</code>
     */
    public Builder clearIpFragcreates() {
      
      ipFragcreates_ = 0;
      onChanged();
      return this;
    }

    private int icmpIncsumerrors_ ;
    /**
     * <code>int32 icmp_incsumerrors = 21;</code>
     */
    public int getIcmpIncsumerrors() {
      return icmpIncsumerrors_;
    }
    /**
     * <code>int32 icmp_incsumerrors = 21;</code>
     */
    public Builder setIcmpIncsumerrors(int value) {
      
      icmpIncsumerrors_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_incsumerrors = 21;</code>
     */
    public Builder clearIcmpIncsumerrors() {
      
      icmpIncsumerrors_ = 0;
      onChanged();
      return this;
    }

    private int udpliteIndatagrams_ ;
    /**
     * <code>int32 udplite_indatagrams = 22;</code>
     */
    public int getUdpliteIndatagrams() {
      return udpliteIndatagrams_;
    }
    /**
     * <code>int32 udplite_indatagrams = 22;</code>
     */
    public Builder setUdpliteIndatagrams(int value) {
      
      udpliteIndatagrams_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 udplite_indatagrams = 22;</code>
     */
    public Builder clearUdpliteIndatagrams() {
      
      udpliteIndatagrams_ = 0;
      onChanged();
      return this;
    }

    private int ipReasmoks_ ;
    /**
     * <code>int32 ip_reasmoks = 23;</code>
     */
    public int getIpReasmoks() {
      return ipReasmoks_;
    }
    /**
     * <code>int32 ip_reasmoks = 23;</code>
     */
    public Builder setIpReasmoks(int value) {
      
      ipReasmoks_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 ip_reasmoks = 23;</code>
     */
    public Builder clearIpReasmoks() {
      
      ipReasmoks_ = 0;
      onChanged();
      return this;
    }

    private int icmpIntimeexcds_ ;
    /**
     * <code>int32 icmp_intimeexcds = 24;</code>
     */
    public int getIcmpIntimeexcds() {
      return icmpIntimeexcds_;
    }
    /**
     * <code>int32 icmp_intimeexcds = 24;</code>
     */
    public Builder setIcmpIntimeexcds(int value) {
      
      icmpIntimeexcds_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_intimeexcds = 24;</code>
     */
    public Builder clearIcmpIntimeexcds() {
      
      icmpIntimeexcds_ = 0;
      onChanged();
      return this;
    }

    private int icmpOuttimeexcds_ ;
    /**
     * <code>int32 icmp_outtimeexcds = 25;</code>
     */
    public int getIcmpOuttimeexcds() {
      return icmpOuttimeexcds_;
    }
    /**
     * <code>int32 icmp_outtimeexcds = 25;</code>
     */
    public Builder setIcmpOuttimeexcds(int value) {
      
      icmpOuttimeexcds_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_outtimeexcds = 25;</code>
     */
    public Builder clearIcmpOuttimeexcds() {
      
      icmpOuttimeexcds_ = 0;
      onChanged();
      return this;
    }

    private int tcpInerrs_ ;
    /**
     * <code>int32 tcp_inerrs = 26;</code>
     */
    public int getTcpInerrs() {
      return tcpInerrs_;
    }
    /**
     * <code>int32 tcp_inerrs = 26;</code>
     */
    public Builder setTcpInerrs(int value) {
      
      tcpInerrs_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 tcp_inerrs = 26;</code>
     */
    public Builder clearTcpInerrs() {
      
      tcpInerrs_ = 0;
      onChanged();
      return this;
    }

    private int icmpOutaddrmaskreps_ ;
    /**
     * <code>int32 icmp_outaddrmaskreps = 27;</code>
     */
    public int getIcmpOutaddrmaskreps() {
      return icmpOutaddrmaskreps_;
    }
    /**
     * <code>int32 icmp_outaddrmaskreps = 27;</code>
     */
    public Builder setIcmpOutaddrmaskreps(int value) {
      
      icmpOutaddrmaskreps_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_outaddrmaskreps = 27;</code>
     */
    public Builder clearIcmpOutaddrmaskreps() {
      
      icmpOutaddrmaskreps_ = 0;
      onChanged();
      return this;
    }

    private int icmpmsgOuttype_ ;
    /**
     * <code>int32 icmpmsg_outtype = 28;</code>
     */
    public int getIcmpmsgOuttype() {
      return icmpmsgOuttype_;
    }
    /**
     * <code>int32 icmpmsg_outtype = 28;</code>
     */
    public Builder setIcmpmsgOuttype(int value) {
      
      icmpmsgOuttype_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmpmsg_outtype = 28;</code>
     */
    public Builder clearIcmpmsgOuttype() {
      
      icmpmsgOuttype_ = 0;
      onChanged();
      return this;
    }

    private int udpNoports_ ;
    /**
     * <code>int32 udp_noports = 29;</code>
     */
    public int getUdpNoports() {
      return udpNoports_;
    }
    /**
     * <code>int32 udp_noports = 29;</code>
     */
    public Builder setUdpNoports(int value) {
      
      udpNoports_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 udp_noports = 29;</code>
     */
    public Builder clearUdpNoports() {
      
      udpNoports_ = 0;
      onChanged();
      return this;
    }

    private int icmpmsgIntype8_ ;
    /**
     * <code>int32 icmpmsg_intype8 = 30;</code>
     */
    public int getIcmpmsgIntype8() {
      return icmpmsgIntype8_;
    }
    /**
     * <code>int32 icmpmsg_intype8 = 30;</code>
     */
    public Builder setIcmpmsgIntype8(int value) {
      
      icmpmsgIntype8_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmpmsg_intype8 = 30;</code>
     */
    public Builder clearIcmpmsgIntype8() {
      
      icmpmsgIntype8_ = 0;
      onChanged();
      return this;
    }

    private long tcpInsegs_ ;
    /**
     * <code>int64 tcp_insegs = 31;</code>
     */
    public long getTcpInsegs() {
      return tcpInsegs_;
    }
    /**
     * <code>int64 tcp_insegs = 31;</code>
     */
    public Builder setTcpInsegs(long value) {
      
      tcpInsegs_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 tcp_insegs = 31;</code>
     */
    public Builder clearTcpInsegs() {
      
      tcpInsegs_ = 0L;
      onChanged();
      return this;
    }

    private int udpliteNoports_ ;
    /**
     * <code>int32 udplite_noports = 32;</code>
     */
    public int getUdpliteNoports() {
      return udpliteNoports_;
    }
    /**
     * <code>int32 udplite_noports = 32;</code>
     */
    public Builder setUdpliteNoports(int value) {
      
      udpliteNoports_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 udplite_noports = 32;</code>
     */
    public Builder clearUdpliteNoports() {
      
      udpliteNoports_ = 0;
      onChanged();
      return this;
    }

    private int ipFragfails_ ;
    /**
     * <code>int32 ip_fragfails = 33;</code>
     */
    public int getIpFragfails() {
      return ipFragfails_;
    }
    /**
     * <code>int32 ip_fragfails = 33;</code>
     */
    public Builder setIpFragfails(int value) {
      
      ipFragfails_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 ip_fragfails = 33;</code>
     */
    public Builder clearIpFragfails() {
      
      ipFragfails_ = 0;
      onChanged();
      return this;
    }

    private long ipIndelivers_ ;
    /**
     * <code>int64 ip_indelivers = 34;</code>
     */
    public long getIpIndelivers() {
      return ipIndelivers_;
    }
    /**
     * <code>int64 ip_indelivers = 34;</code>
     */
    public Builder setIpIndelivers(long value) {
      
      ipIndelivers_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 ip_indelivers = 34;</code>
     */
    public Builder clearIpIndelivers() {
      
      ipIndelivers_ = 0L;
      onChanged();
      return this;
    }

    private int icmpOuttimestamps_ ;
    /**
     * <code>int32 icmp_outtimestamps = 35;</code>
     */
    public int getIcmpOuttimestamps() {
      return icmpOuttimestamps_;
    }
    /**
     * <code>int32 icmp_outtimestamps = 35;</code>
     */
    public Builder setIcmpOuttimestamps(int value) {
      
      icmpOuttimestamps_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_outtimestamps = 35;</code>
     */
    public Builder clearIcmpOuttimestamps() {
      
      icmpOuttimestamps_ = 0;
      onChanged();
      return this;
    }

    private int icmpOutechoreps_ ;
    /**
     * <code>int32 icmp_outechoreps = 36;</code>
     */
    public int getIcmpOutechoreps() {
      return icmpOutechoreps_;
    }
    /**
     * <code>int32 icmp_outechoreps = 36;</code>
     */
    public Builder setIcmpOutechoreps(int value) {
      
      icmpOutechoreps_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_outechoreps = 36;</code>
     */
    public Builder clearIcmpOutechoreps() {
      
      icmpOutechoreps_ = 0;
      onChanged();
      return this;
    }

    private int tcpIncsumerrors_ ;
    /**
     * <code>int32 tcp_incsumerrors = 37;</code>
     */
    public int getTcpIncsumerrors() {
      return tcpIncsumerrors_;
    }
    /**
     * <code>int32 tcp_incsumerrors = 37;</code>
     */
    public Builder setTcpIncsumerrors(int value) {
      
      tcpIncsumerrors_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 tcp_incsumerrors = 37;</code>
     */
    public Builder clearTcpIncsumerrors() {
      
      tcpIncsumerrors_ = 0;
      onChanged();
      return this;
    }

    private int tcpRtoalgorithm_ ;
    /**
     * <code>int32 tcp_rtoalgorithm = 38;</code>
     */
    public int getTcpRtoalgorithm() {
      return tcpRtoalgorithm_;
    }
    /**
     * <code>int32 tcp_rtoalgorithm = 38;</code>
     */
    public Builder setTcpRtoalgorithm(int value) {
      
      tcpRtoalgorithm_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 tcp_rtoalgorithm = 38;</code>
     */
    public Builder clearTcpRtoalgorithm() {
      
      tcpRtoalgorithm_ = 0;
      onChanged();
      return this;
    }

    private int ipForwdatagrams_ ;
    /**
     * <code>int32 ip_forwdatagrams = 39;</code>
     */
    public int getIpForwdatagrams() {
      return ipForwdatagrams_;
    }
    /**
     * <code>int32 ip_forwdatagrams = 39;</code>
     */
    public Builder setIpForwdatagrams(int value) {
      
      ipForwdatagrams_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 ip_forwdatagrams = 39;</code>
     */
    public Builder clearIpForwdatagrams() {
      
      ipForwdatagrams_ = 0;
      onChanged();
      return this;
    }

    private int icmpInsrcquenchs_ ;
    /**
     * <code>int32 icmp_insrcquenchs = 40;</code>
     */
    public int getIcmpInsrcquenchs() {
      return icmpInsrcquenchs_;
    }
    /**
     * <code>int32 icmp_insrcquenchs = 40;</code>
     */
    public Builder setIcmpInsrcquenchs(int value) {
      
      icmpInsrcquenchs_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_insrcquenchs = 40;</code>
     */
    public Builder clearIcmpInsrcquenchs() {
      
      icmpInsrcquenchs_ = 0;
      onChanged();
      return this;
    }

    private int icmpOutdestunreachs_ ;
    /**
     * <code>int32 icmp_outdestunreachs = 41;</code>
     */
    public int getIcmpOutdestunreachs() {
      return icmpOutdestunreachs_;
    }
    /**
     * <code>int32 icmp_outdestunreachs = 41;</code>
     */
    public Builder setIcmpOutdestunreachs(int value) {
      
      icmpOutdestunreachs_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_outdestunreachs = 41;</code>
     */
    public Builder clearIcmpOutdestunreachs() {
      
      icmpOutdestunreachs_ = 0;
      onChanged();
      return this;
    }

    private int icmpOutparmprobs_ ;
    /**
     * <code>int32 icmp_outparmprobs = 42;</code>
     */
    public int getIcmpOutparmprobs() {
      return icmpOutparmprobs_;
    }
    /**
     * <code>int32 icmp_outparmprobs = 42;</code>
     */
    public Builder setIcmpOutparmprobs(int value) {
      
      icmpOutparmprobs_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_outparmprobs = 42;</code>
     */
    public Builder clearIcmpOutparmprobs() {
      
      icmpOutparmprobs_ = 0;
      onChanged();
      return this;
    }

    private int ipOutnoroutes_ ;
    /**
     * <code>int32 ip_outnoroutes = 43;</code>
     */
    public int getIpOutnoroutes() {
      return ipOutnoroutes_;
    }
    /**
     * <code>int32 ip_outnoroutes = 43;</code>
     */
    public Builder setIpOutnoroutes(int value) {
      
      ipOutnoroutes_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 ip_outnoroutes = 43;</code>
     */
    public Builder clearIpOutnoroutes() {
      
      ipOutnoroutes_ = 0;
      onChanged();
      return this;
    }

    private int icmpInechoreps_ ;
    /**
     * <code>int32 icmp_inechoreps = 44;</code>
     */
    public int getIcmpInechoreps() {
      return icmpInechoreps_;
    }
    /**
     * <code>int32 icmp_inechoreps = 44;</code>
     */
    public Builder setIcmpInechoreps(int value) {
      
      icmpInechoreps_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_inechoreps = 44;</code>
     */
    public Builder clearIcmpInechoreps() {
      
      icmpInechoreps_ = 0;
      onChanged();
      return this;
    }

    private int udpliteInerrors_ ;
    /**
     * <code>int32 udplite_inerrors = 45;</code>
     */
    public int getUdpliteInerrors() {
      return udpliteInerrors_;
    }
    /**
     * <code>int32 udplite_inerrors = 45;</code>
     */
    public Builder setUdpliteInerrors(int value) {
      
      udpliteInerrors_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 udplite_inerrors = 45;</code>
     */
    public Builder clearUdpliteInerrors() {
      
      udpliteInerrors_ = 0;
      onChanged();
      return this;
    }

    private int tcpCurrestab_ ;
    /**
     * <code>int32 tcp_currestab = 46;</code>
     */
    public int getTcpCurrestab() {
      return tcpCurrestab_;
    }
    /**
     * <code>int32 tcp_currestab = 46;</code>
     */
    public Builder setTcpCurrestab(int value) {
      
      tcpCurrestab_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 tcp_currestab = 46;</code>
     */
    public Builder clearTcpCurrestab() {
      
      tcpCurrestab_ = 0;
      onChanged();
      return this;
    }

    private int ipInunknownprotos_ ;
    /**
     * <code>int32 ip_inunknownprotos = 47;</code>
     */
    public int getIpInunknownprotos() {
      return ipInunknownprotos_;
    }
    /**
     * <code>int32 ip_inunknownprotos = 47;</code>
     */
    public Builder setIpInunknownprotos(int value) {
      
      ipInunknownprotos_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 ip_inunknownprotos = 47;</code>
     */
    public Builder clearIpInunknownprotos() {
      
      ipInunknownprotos_ = 0;
      onChanged();
      return this;
    }

    private int icmpInechos_ ;
    /**
     * <code>int32 icmp_inechos = 48;</code>
     */
    public int getIcmpInechos() {
      return icmpInechos_;
    }
    /**
     * <code>int32 icmp_inechos = 48;</code>
     */
    public Builder setIcmpInechos(int value) {
      
      icmpInechos_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_inechos = 48;</code>
     */
    public Builder clearIcmpInechos() {
      
      icmpInechos_ = 0;
      onChanged();
      return this;
    }

    private int icmpInparmprobs_ ;
    /**
     * <code>int32 icmp_inparmprobs = 49;</code>
     */
    public int getIcmpInparmprobs() {
      return icmpInparmprobs_;
    }
    /**
     * <code>int32 icmp_inparmprobs = 49;</code>
     */
    public Builder setIcmpInparmprobs(int value) {
      
      icmpInparmprobs_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_inparmprobs = 49;</code>
     */
    public Builder clearIcmpInparmprobs() {
      
      icmpInparmprobs_ = 0;
      onChanged();
      return this;
    }

    private int icmpInerrors_ ;
    /**
     * <code>int32 icmp_inerrors = 50;</code>
     */
    public int getIcmpInerrors() {
      return icmpInerrors_;
    }
    /**
     * <code>int32 icmp_inerrors = 50;</code>
     */
    public Builder setIcmpInerrors(int value) {
      
      icmpInerrors_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_inerrors = 50;</code>
     */
    public Builder clearIcmpInerrors() {
      
      icmpInerrors_ = 0;
      onChanged();
      return this;
    }

    private int tcpActiveopens_ ;
    /**
     * <code>int32 tcp_activeopens = 51;</code>
     */
    public int getTcpActiveopens() {
      return tcpActiveopens_;
    }
    /**
     * <code>int32 tcp_activeopens = 51;</code>
     */
    public Builder setTcpActiveopens(int value) {
      
      tcpActiveopens_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 tcp_activeopens = 51;</code>
     */
    public Builder clearTcpActiveopens() {
      
      tcpActiveopens_ = 0;
      onChanged();
      return this;
    }

    private int tcpOutrsts_ ;
    /**
     * <code>int32 tcp_outrsts = 52;</code>
     */
    public int getTcpOutrsts() {
      return tcpOutrsts_;
    }
    /**
     * <code>int32 tcp_outrsts = 52;</code>
     */
    public Builder setTcpOutrsts(int value) {
      
      tcpOutrsts_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 tcp_outrsts = 52;</code>
     */
    public Builder clearTcpOutrsts() {
      
      tcpOutrsts_ = 0;
      onChanged();
      return this;
    }

    private int udpliteIgnoredmulti_ ;
    /**
     * <code>int32 udplite_ignoredmulti = 53;</code>
     */
    public int getUdpliteIgnoredmulti() {
      return udpliteIgnoredmulti_;
    }
    /**
     * <code>int32 udplite_ignoredmulti = 53;</code>
     */
    public Builder setUdpliteIgnoredmulti(int value) {
      
      udpliteIgnoredmulti_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 udplite_ignoredmulti = 53;</code>
     */
    public Builder clearUdpliteIgnoredmulti() {
      
      udpliteIgnoredmulti_ = 0;
      onChanged();
      return this;
    }

    private int ipForwarding_ ;
    /**
     * <code>int32 ip_forwarding = 54;</code>
     */
    public int getIpForwarding() {
      return ipForwarding_;
    }
    /**
     * <code>int32 ip_forwarding = 54;</code>
     */
    public Builder setIpForwarding(int value) {
      
      ipForwarding_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 ip_forwarding = 54;</code>
     */
    public Builder clearIpForwarding() {
      
      ipForwarding_ = 0;
      onChanged();
      return this;
    }

    private long ipInreceives_ ;
    /**
     * <code>int64 ip_inreceives = 55;</code>
     */
    public long getIpInreceives() {
      return ipInreceives_;
    }
    /**
     * <code>int64 ip_inreceives = 55;</code>
     */
    public Builder setIpInreceives(long value) {
      
      ipInreceives_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 ip_inreceives = 55;</code>
     */
    public Builder clearIpInreceives() {
      
      ipInreceives_ = 0L;
      onChanged();
      return this;
    }

    private int ipOutdiscards_ ;
    /**
     * <code>int32 ip_outdiscards = 56;</code>
     */
    public int getIpOutdiscards() {
      return ipOutdiscards_;
    }
    /**
     * <code>int32 ip_outdiscards = 56;</code>
     */
    public Builder setIpOutdiscards(int value) {
      
      ipOutdiscards_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 ip_outdiscards = 56;</code>
     */
    public Builder clearIpOutdiscards() {
      
      ipOutdiscards_ = 0;
      onChanged();
      return this;
    }

    private int icmpInredirects_ ;
    /**
     * <code>int32 icmp_inredirects = 57;</code>
     */
    public int getIcmpInredirects() {
      return icmpInredirects_;
    }
    /**
     * <code>int32 icmp_inredirects = 57;</code>
     */
    public Builder setIcmpInredirects(int value) {
      
      icmpInredirects_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_inredirects = 57;</code>
     */
    public Builder clearIcmpInredirects() {
      
      icmpInredirects_ = 0;
      onChanged();
      return this;
    }

    private int icmpInaddrmaskreps_ ;
    /**
     * <code>int32 icmp_inaddrmaskreps = 58;</code>
     */
    public int getIcmpInaddrmaskreps() {
      return icmpInaddrmaskreps_;
    }
    /**
     * <code>int32 icmp_inaddrmaskreps = 58;</code>
     */
    public Builder setIcmpInaddrmaskreps(int value) {
      
      icmpInaddrmaskreps_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_inaddrmaskreps = 58;</code>
     */
    public Builder clearIcmpInaddrmaskreps() {
      
      icmpInaddrmaskreps_ = 0;
      onChanged();
      return this;
    }

    private int icmpInaddrmasks_ ;
    /**
     * <code>int32 icmp_inaddrmasks = 59;</code>
     */
    public int getIcmpInaddrmasks() {
      return icmpInaddrmasks_;
    }
    /**
     * <code>int32 icmp_inaddrmasks = 59;</code>
     */
    public Builder setIcmpInaddrmasks(int value) {
      
      icmpInaddrmasks_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_inaddrmasks = 59;</code>
     */
    public Builder clearIcmpInaddrmasks() {
      
      icmpInaddrmasks_ = 0;
      onChanged();
      return this;
    }

    private int icmpOuterrors_ ;
    /**
     * <code>int32 icmp_outerrors = 60;</code>
     */
    public int getIcmpOuterrors() {
      return icmpOuterrors_;
    }
    /**
     * <code>int32 icmp_outerrors = 60;</code>
     */
    public Builder setIcmpOuterrors(int value) {
      
      icmpOuterrors_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_outerrors = 60;</code>
     */
    public Builder clearIcmpOuterrors() {
      
      icmpOuterrors_ = 0;
      onChanged();
      return this;
    }

    private long tcpOutsegs_ ;
    /**
     * <code>int64 tcp_outsegs = 61;</code>
     */
    public long getTcpOutsegs() {
      return tcpOutsegs_;
    }
    /**
     * <code>int64 tcp_outsegs = 61;</code>
     */
    public Builder setTcpOutsegs(long value) {
      
      tcpOutsegs_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 tcp_outsegs = 61;</code>
     */
    public Builder clearTcpOutsegs() {
      
      tcpOutsegs_ = 0L;
      onChanged();
      return this;
    }

    private int ipDefaultttl_ ;
    /**
     * <code>int32 ip_defaultttl = 62;</code>
     */
    public int getIpDefaultttl() {
      return ipDefaultttl_;
    }
    /**
     * <code>int32 ip_defaultttl = 62;</code>
     */
    public Builder setIpDefaultttl(int value) {
      
      ipDefaultttl_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 ip_defaultttl = 62;</code>
     */
    public Builder clearIpDefaultttl() {
      
      ipDefaultttl_ = 0;
      onChanged();
      return this;
    }

    private int ipInaddrerrors_ ;
    /**
     * <code>int32 ip_inaddrerrors = 63;</code>
     */
    public int getIpInaddrerrors() {
      return ipInaddrerrors_;
    }
    /**
     * <code>int32 ip_inaddrerrors = 63;</code>
     */
    public Builder setIpInaddrerrors(int value) {
      
      ipInaddrerrors_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 ip_inaddrerrors = 63;</code>
     */
    public Builder clearIpInaddrerrors() {
      
      ipInaddrerrors_ = 0;
      onChanged();
      return this;
    }

    private int icmpOutsrcquenchs_ ;
    /**
     * <code>int32 icmp_outsrcquenchs = 64;</code>
     */
    public int getIcmpOutsrcquenchs() {
      return icmpOutsrcquenchs_;
    }
    /**
     * <code>int32 icmp_outsrcquenchs = 64;</code>
     */
    public Builder setIcmpOutsrcquenchs(int value) {
      
      icmpOutsrcquenchs_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_outsrcquenchs = 64;</code>
     */
    public Builder clearIcmpOutsrcquenchs() {
      
      icmpOutsrcquenchs_ = 0;
      onChanged();
      return this;
    }

    private int icmpOutredirects_ ;
    /**
     * <code>int32 icmp_outredirects = 65;</code>
     */
    public int getIcmpOutredirects() {
      return icmpOutredirects_;
    }
    /**
     * <code>int32 icmp_outredirects = 65;</code>
     */
    public Builder setIcmpOutredirects(int value) {
      
      icmpOutredirects_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_outredirects = 65;</code>
     */
    public Builder clearIcmpOutredirects() {
      
      icmpOutredirects_ = 0;
      onChanged();
      return this;
    }

    private long tcpEstabresets_ ;
    /**
     * <code>int64 tcp_estabresets = 66;</code>
     */
    public long getTcpEstabresets() {
      return tcpEstabresets_;
    }
    /**
     * <code>int64 tcp_estabresets = 66;</code>
     */
    public Builder setTcpEstabresets(long value) {
      
      tcpEstabresets_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 tcp_estabresets = 66;</code>
     */
    public Builder clearTcpEstabresets() {
      
      tcpEstabresets_ = 0L;
      onChanged();
      return this;
    }

    private int udpliteSndbuferrors_ ;
    /**
     * <code>int32 udplite_sndbuferrors = 67;</code>
     */
    public int getUdpliteSndbuferrors() {
      return udpliteSndbuferrors_;
    }
    /**
     * <code>int32 udplite_sndbuferrors = 67;</code>
     */
    public Builder setUdpliteSndbuferrors(int value) {
      
      udpliteSndbuferrors_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 udplite_sndbuferrors = 67;</code>
     */
    public Builder clearUdpliteSndbuferrors() {
      
      udpliteSndbuferrors_ = 0;
      onChanged();
      return this;
    }

    private long ipOutrequests_ ;
    /**
     * <code>int64 ip_outrequests = 68;</code>
     */
    public long getIpOutrequests() {
      return ipOutrequests_;
    }
    /**
     * <code>int64 ip_outrequests = 68;</code>
     */
    public Builder setIpOutrequests(long value) {
      
      ipOutrequests_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 ip_outrequests = 68;</code>
     */
    public Builder clearIpOutrequests() {
      
      ipOutrequests_ = 0L;
      onChanged();
      return this;
    }

    private int icmpOutmsgs_ ;
    /**
     * <code>int32 icmp_outmsgs = 69;</code>
     */
    public int getIcmpOutmsgs() {
      return icmpOutmsgs_;
    }
    /**
     * <code>int32 icmp_outmsgs = 69;</code>
     */
    public Builder setIcmpOutmsgs(int value) {
      
      icmpOutmsgs_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_outmsgs = 69;</code>
     */
    public Builder clearIcmpOutmsgs() {
      
      icmpOutmsgs_ = 0;
      onChanged();
      return this;
    }

    private long tcpRetranssegs_ ;
    /**
     * <code>int64 tcp_retranssegs = 70;</code>
     */
    public long getTcpRetranssegs() {
      return tcpRetranssegs_;
    }
    /**
     * <code>int64 tcp_retranssegs = 70;</code>
     */
    public Builder setTcpRetranssegs(long value) {
      
      tcpRetranssegs_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 tcp_retranssegs = 70;</code>
     */
    public Builder clearTcpRetranssegs() {
      
      tcpRetranssegs_ = 0L;
      onChanged();
      return this;
    }

    private long udpOutdatagrams_ ;
    /**
     * <code>int64 udp_outdatagrams = 71;</code>
     */
    public long getUdpOutdatagrams() {
      return udpOutdatagrams_;
    }
    /**
     * <code>int64 udp_outdatagrams = 71;</code>
     */
    public Builder setUdpOutdatagrams(long value) {
      
      udpOutdatagrams_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 udp_outdatagrams = 71;</code>
     */
    public Builder clearUdpOutdatagrams() {
      
      udpOutdatagrams_ = 0L;
      onChanged();
      return this;
    }

    private int udpSndbuferrors_ ;
    /**
     * <code>int32 udp_sndbuferrors = 72;</code>
     */
    public int getUdpSndbuferrors() {
      return udpSndbuferrors_;
    }
    /**
     * <code>int32 udp_sndbuferrors = 72;</code>
     */
    public Builder setUdpSndbuferrors(int value) {
      
      udpSndbuferrors_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 udp_sndbuferrors = 72;</code>
     */
    public Builder clearUdpSndbuferrors() {
      
      udpSndbuferrors_ = 0;
      onChanged();
      return this;
    }

    private int icmpIntimestamps_ ;
    /**
     * <code>int32 icmp_intimestamps = 73;</code>
     */
    public int getIcmpIntimestamps() {
      return icmpIntimestamps_;
    }
    /**
     * <code>int32 icmp_intimestamps = 73;</code>
     */
    public Builder setIcmpIntimestamps(int value) {
      
      icmpIntimestamps_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_intimestamps = 73;</code>
     */
    public Builder clearIcmpIntimestamps() {
      
      icmpIntimestamps_ = 0;
      onChanged();
      return this;
    }

    private int icmpIndestunreachs_ ;
    /**
     * <code>int32 icmp_indestunreachs = 74;</code>
     */
    public int getIcmpIndestunreachs() {
      return icmpIndestunreachs_;
    }
    /**
     * <code>int32 icmp_indestunreachs = 74;</code>
     */
    public Builder setIcmpIndestunreachs(int value) {
      
      icmpIndestunreachs_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_indestunreachs = 74;</code>
     */
    public Builder clearIcmpIndestunreachs() {
      
      icmpIndestunreachs_ = 0;
      onChanged();
      return this;
    }

    private int icmpmsgOuttype0_ ;
    /**
     * <code>int32 icmpmsg_outtype0 = 75;</code>
     */
    public int getIcmpmsgOuttype0() {
      return icmpmsgOuttype0_;
    }
    /**
     * <code>int32 icmpmsg_outtype0 = 75;</code>
     */
    public Builder setIcmpmsgOuttype0(int value) {
      
      icmpmsgOuttype0_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmpmsg_outtype0 = 75;</code>
     */
    public Builder clearIcmpmsgOuttype0() {
      
      icmpmsgOuttype0_ = 0;
      onChanged();
      return this;
    }

    private int udpIndatagrams_ ;
    /**
     * <code>int32 udp_indatagrams = 76;</code>
     */
    public int getUdpIndatagrams() {
      return udpIndatagrams_;
    }
    /**
     * <code>int32 udp_indatagrams = 76;</code>
     */
    public Builder setUdpIndatagrams(int value) {
      
      udpIndatagrams_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 udp_indatagrams = 76;</code>
     */
    public Builder clearUdpIndatagrams() {
      
      udpIndatagrams_ = 0;
      onChanged();
      return this;
    }

    private int udpInerrors_ ;
    /**
     * <code>int32 udp_inerrors = 77;</code>
     */
    public int getUdpInerrors() {
      return udpInerrors_;
    }
    /**
     * <code>int32 udp_inerrors = 77;</code>
     */
    public Builder setUdpInerrors(int value) {
      
      udpInerrors_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 udp_inerrors = 77;</code>
     */
    public Builder clearUdpInerrors() {
      
      udpInerrors_ = 0;
      onChanged();
      return this;
    }

    private int udpliteIncsumerrors_ ;
    /**
     * <code>int32 udplite_incsumerrors = 78;</code>
     */
    public int getUdpliteIncsumerrors() {
      return udpliteIncsumerrors_;
    }
    /**
     * <code>int32 udplite_incsumerrors = 78;</code>
     */
    public Builder setUdpliteIncsumerrors(int value) {
      
      udpliteIncsumerrors_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 udplite_incsumerrors = 78;</code>
     */
    public Builder clearUdpliteIncsumerrors() {
      
      udpliteIncsumerrors_ = 0;
      onChanged();
      return this;
    }

    private int ipInhdrerrors_ ;
    /**
     * <code>int32 ip_inhdrerrors = 79;</code>
     */
    public int getIpInhdrerrors() {
      return ipInhdrerrors_;
    }
    /**
     * <code>int32 ip_inhdrerrors = 79;</code>
     */
    public Builder setIpInhdrerrors(int value) {
      
      ipInhdrerrors_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 ip_inhdrerrors = 79;</code>
     */
    public Builder clearIpInhdrerrors() {
      
      ipInhdrerrors_ = 0;
      onChanged();
      return this;
    }

    private int icmpIntimestampreps_ ;
    /**
     * <code>int32 icmp_intimestampreps = 80;</code>
     */
    public int getIcmpIntimestampreps() {
      return icmpIntimestampreps_;
    }
    /**
     * <code>int32 icmp_intimestampreps = 80;</code>
     */
    public Builder setIcmpIntimestampreps(int value) {
      
      icmpIntimestampreps_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmp_intimestampreps = 80;</code>
     */
    public Builder clearIcmpIntimestampreps() {
      
      icmpIntimestampreps_ = 0;
      onChanged();
      return this;
    }

    private int icmpmsgIntype3_ ;
    /**
     * <code>int32 icmpmsg_intype3 = 81;</code>
     */
    public int getIcmpmsgIntype3() {
      return icmpmsgIntype3_;
    }
    /**
     * <code>int32 icmpmsg_intype3 = 81;</code>
     */
    public Builder setIcmpmsgIntype3(int value) {
      
      icmpmsgIntype3_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 icmpmsg_intype3 = 81;</code>
     */
    public Builder clearIcmpmsgIntype3() {
      
      icmpmsgIntype3_ = 0;
      onChanged();
      return this;
    }

    private int tcpAttemptfails_ ;
    /**
     * <code>int32 tcp_attemptfails = 82;</code>
     */
    public int getTcpAttemptfails() {
      return tcpAttemptfails_;
    }
    /**
     * <code>int32 tcp_attemptfails = 82;</code>
     */
    public Builder setTcpAttemptfails(int value) {
      
      tcpAttemptfails_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 tcp_attemptfails = 82;</code>
     */
    public Builder clearTcpAttemptfails() {
      
      tcpAttemptfails_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.protobuf.example.NetMetrics2)
  }

  // @@protoc_insertion_point(class_scope:google.protobuf.example.NetMetrics2)
  private static final com.google.cloud.example.protobuf.NetMetrics2 DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.cloud.example.protobuf.NetMetrics2();
  }

  public static com.google.cloud.example.protobuf.NetMetrics2 getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<NetMetrics2>
      PARSER = new com.google.protobuf.AbstractParser<NetMetrics2>() {
    @java.lang.Override
    public NetMetrics2 parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new NetMetrics2(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<NetMetrics2> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<NetMetrics2> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.example.protobuf.NetMetrics2 getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

